/**
 <!--
  
 ## Copyright Information				: C-DAC, Noida  
 ## Project Name				       	: NIMS
 ## Name of Developer		 			: SIDDHARTH SRIVASTAVA
 ## Module Name					        : INVESTIGATION
 ## Process/Database Object Name	    : Template Processing User Class
 ## Purpose						        : This class provides functions for utilizing the XML generated by Test Parameter Master
 ## Date of Creation					: 
 ## Modification Log					:				
 ##		Modify Date				        :  
 ##		Reason	(CR/PRS)			    : 
 ##		Modify By				        : 


*/

package new_investigation.transactions.controller.Helper;

import hisglobal.Entry;
import hisglobal.presentation.WebUTIL;
import hisglobal.utility.HelperMethods;













import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.commons.lang.StringEscapeUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import com.itextpdf.text.pdf.PdfStructTreeController.returnType;

import new_investigation.InvestigationConfig;
import new_investigation.transactions.controller.data.InvResultValidationDATA;
import new_investigation.transactions.controller.fb.invAntibioticProcessFB;
import new_investigation.transactions.dao.Helper.InvestigationTemplateDataHelper;
import new_investigation.vo.InvCriteriaCodeVO;
import new_investigation.vo.InvResultEntryVO;
import new_investigation.vo.TestMandRefMasterVO;
import new_investigation.vo.antibioticprocessVO;
import new_investigation.vo.invAntibioticProcessVO;
import new_investigation.vo.invFungusProcessVO;
import new_investigation.vo.template.HexaStringClass;
import new_investigation.vo.template.ResultEntryVOGroupByValidatedBy;
import new_investigation.vo.template.ResultEntryVO;
import new_investigation.vo.template.SiteVO;
import new_investigation.vo.template.TemplateQueryParameterVO;
import new_investigation.vo.template.TriStringObject;

public class TemplateProcessingUSE {
	
	private static Map<String,List<String>> mp_autolist=new HashMap();



	public static List<ResultEntryVO> groupSelectedWorkOrders(
			List<ResultEntryVO> selectedWorkOrderList, HttpSession session) {
		// TODO Auto-generated method stub
	//	LOGGER_INV.log(Level.INFO,"INVESTIGATION COMMON PROCESS: groupSelectedWorkOrders ");

		mp_autolist=new HashMap();
		List<ResultEntryVO> newselectedWorkOrderList=new ArrayList<ResultEntryVO>();
		ResultEntryVO newResultEntryVOGroupByValidatedBy=null;
		Map<String,Integer> selectedMapDetails=new HashMap<String,Integer>();
		Map<String, Integer> selectedDynamicGroupDetail = new HashMap<String, Integer>();
		Map<String, List<ResultEntryVO>> dynamicReqNoList = new HashMap<String, List<ResultEntryVO>>();
		session.removeAttribute("dynamicTemplateList");
		Map<String, ResultEntryVO> reqDNoTestMap = new HashMap<String, ResultEntryVO>();
		List<ResultEntryVO> rvoWithDynamic = new ArrayList<ResultEntryVO>();
		try
		{
		//	LOGGER_INV.log(Level.INFO,"INVESTIGATION COMMON PROCESS: groupSelectedWorkOrders step 1");
		for(ResultEntryVO resultEntryVOGroupByValidatedBy:selectedWorkOrderList)
		{
			for(ResultEntryVO resultEntryVO: resultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy())
			{
				String s = resultEntryVO.getGroupCode() + resultEntryVO.getDynamnicTemplateResultEntryGroup();
				
				if(selectedDynamicGroupDetail.containsKey(s)) {
					resultEntryVO.setDoCreateTemplate(false);
					rvoWithDynamic.add(resultEntryVO);
					reqDNoTestMap.put(resultEntryVO.getRequisitionNo()+resultEntryVO.getGroupCode()+resultEntryVO.getTestCode(), resultEntryVO);
					
				}	
				else if(resultEntryVO.getDynamnicTemplateResultEntryGroup().equals("1"))
				{
					//resultEntryVO.setTestName(resultEntryVO.getGroupName());
					selectedDynamicGroupDetail.put(resultEntryVO.getGroupCode() + "1", 1);
					rvoWithDynamic.add(resultEntryVO);
					reqDNoTestMap.put(resultEntryVO.getRequisitionNo()+resultEntryVO.getGroupCode()+resultEntryVO.getTestCode(), resultEntryVO);
				}
			}
			
			
			
		}
		session.setAttribute("dynamicTests", reqDNoTestMap);
		for(ResultEntryVO resultEntryVOGroupByValidatedBy:selectedWorkOrderList)
		{
//			if(resultEntryVOGroupByValidatedBy.getGroupCode() !=null //					
//					)
//			{
//				/*
//				 * resultEntryVOGroupByValidatedBy represents a group so no processing is 
//				 * required add this to new list
//				 * */
//				int workOrderGroupIndex=newselectedWorkOrderList.size();
//				newselectedWorkOrderList.add(resultEntryVOGroupByValidatedBy);
//				int resultEntryVOIndex=0;
//				for(ResultEntryVO resultEntryVO: resultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy())
//				{
//					getResultEntryTemplatedocument(resultEntryVO,resultEntryVOIndex,newselectedWorkOrderList.size()-1, session);
//					resultEntryVOIndex++;
//				}
//				
//				getTestGroupTemplatedocument(resultEntryVOGroupByValidatedBy, workOrderGroupIndex, session);
//				
//				
//				
//			}
//			else
//			{
			//	LOGGER_INV.log(Level.INFO,"INVESTIGATION COMMON PROCESS: groupSelectedWorkOrders step2");
				String key=resultEntryVOGroupByValidatedBy.getPatCRNo()+resultEntryVOGroupByValidatedBy.getEpisodeCode()+resultEntryVOGroupByValidatedBy.getPatVisitNo()+resultEntryVOGroupByValidatedBy.getSampleNo();
			if(resultEntryVOGroupByValidatedBy.getParaType()!=null /*|| resultEntryVOGroupByValidatedBy.getParaType().equals("2")*/)
			{}
			else 
			{
				if(resultEntryVOGroupByValidatedBy.getRequisitionTypeCode().equals("1"))
				{
					key=resultEntryVOGroupByValidatedBy.getPatCRNo()+resultEntryVOGroupByValidatedBy.getEpisodeCode()+resultEntryVOGroupByValidatedBy.getPatVisitNo()+resultEntryVOGroupByValidatedBy.getSampleNo();
				}
				else if(resultEntryVOGroupByValidatedBy.getRequisitionTypeCode().equals("2"))
				{
					key=resultEntryVOGroupByValidatedBy.getPatCRNo()+resultEntryVOGroupByValidatedBy.getEpisodeCode()+resultEntryVOGroupByValidatedBy.getPatVisitNo()+resultEntryVOGroupByValidatedBy.getSampleNo();
				}
				else if(resultEntryVOGroupByValidatedBy.getRequisitionTypeCode().equals("3"))
				{
					key=resultEntryVOGroupByValidatedBy.getPatCRNo()+resultEntryVOGroupByValidatedBy.getEpisodeCode()+resultEntryVOGroupByValidatedBy.getPatVisitNo()+resultEntryVOGroupByValidatedBy.getSampleNo();
					//key=resultEntryVOGroupByValidatedBy.getRequisitionDNo().substring(0,17)+resultEntryVOGroupByValidatedBy.getSampleNo();
				}else if(resultEntryVOGroupByValidatedBy.getRequisitionTypeCode().equals("4"))
				{
					key=resultEntryVOGroupByValidatedBy.getPatCRNo()+resultEntryVOGroupByValidatedBy.getEpisodeCode()+resultEntryVOGroupByValidatedBy.getPatVisitNo()+resultEntryVOGroupByValidatedBy.getSampleNo();
					//key=resultEntryVOGroupByValidatedBy.getRequisitionDNo().substring(0,17)+resultEntryVOGroupByValidatedBy.getSampleNo();
				}
				else
				{
					
				}
			}	
				/*if(selectedMapDetails.containsKey(key))
				{
					newResultEntryVOGroupByValidatedBy=newselectedWorkOrderList.get(selectedMapDetails.get(key));
					for(ResultEntryVO resultEntryVO :resultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy())
					{
						// get the template for the workOrder ResultEntry 
						getResultEntryTemplatedocument(resultEntryVO,newResultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy().size(),selectedMapDetails.get(key), session);
						newResultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy().add(resultEntryVO);
					}
					
				}*/
				//else
				{
					
					
					newResultEntryVOGroupByValidatedBy=resultEntryVOGroupByValidatedBy;
					newselectedWorkOrderList.add(newResultEntryVOGroupByValidatedBy);
					selectedMapDetails.put(key, newselectedWorkOrderList.size()-1);
					int resultEntryVOIndex=0;
					
					
					for(ResultEntryVO resultEntryVO: newResultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy())
					{
//						String s = resultEntryVO.getGroupCode() + resultEntryVO.getDynamnicTemplateResultEntryGroup();
//						
//						if(selectedDynamicGroupDetail.containsKey(s)) {
//							resultEntryVO.setDoCreateTemplate(false);
//							rvoWithDynamic.add(resultEntryVO);
//							
//						}	
//						else if(resultEntryVO.getDynamnicTemplateResultEntryGroup().equals("1"))
//						{
//							//resultEntryVO.setTestName(resultEntryVO.getGroupName());
//							selectedDynamicGroupDetail.put(resultEntryVO.getGroupCode() + "1", 1);
//							rvoWithDynamic.add(resultEntryVO);
//						}
						 getResultEntryTemplatedocument(resultEntryVO,resultEntryVOIndex,newselectedWorkOrderList.size()-1, session);
						resultEntryVOIndex++;
						//newselectedWorkOrderList.get(newselectedWorkOrderList.size()-1).setParaLoinc(resultEntryVO.getParaLoinc());
					}
					
					dynamicReqNoList.put(newResultEntryVOGroupByValidatedBy.getRequisitionNo(), rvoWithDynamic);
					
					//newselectedWorkOrderList.get(newselectedWorkOrderList.size()-1).setLoincCode(resultEntryVO.get);
				}
			}
			
			
	//	}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		session.setAttribute("dynamicTemplateList", dynamicReqNoList);
		selectedWorkOrderList=null;
		session.removeAttribute("dynamicTests");
		return newselectedWorkOrderList;

	}
	
	public static synchronized void getResultEntryTemplatedocument(ResultEntryVO resultEntryVO, int index,int workOrderGroupIndex, HttpSession session)
	{
		
		session.removeAttribute("xslPrintRequisitionForm");
	 	
		try
		{
			boolean isGroupWithDynamicTemplate = false;
		//LOGGER_INV.log(Level.INFO,"getResultEntryTemplatedocument");
			String dynamicTemplateID = null;
		if(resultEntryVO.getDynamnicTemplateResultEntryGroup() != null && resultEntryVO.getDynamnicTemplateResultEntryGroup().equals("1"))
		{
			// it is a group and to be printed with dynamic template 
			isGroupWithDynamicTemplate = true;
			dynamicTemplateID =InvestigationTemplateDataHelper.getInstance().getDynamicTemplateStatus(resultEntryVO.getGroupCode(), resultEntryVO.getHospitalcode(), isGroupWithDynamicTemplate, resultEntryVO.getLabCode(),resultEntryVO.getParaType());
		}
		else
		{
			// it is a test or test in a group
			isGroupWithDynamicTemplate = false;
			 dynamicTemplateID = InvestigationTemplateDataHelper.getInstance().getDynamicTemplateStatus(resultEntryVO.getTestCode(), null, isGroupWithDynamicTemplate, resultEntryVO.getLabCode(),resultEntryVO.getParaType());
		}
	  	boolean isPrintWithDynamicTemplate = false;
	  	String testC = resultEntryVO.getTestCode();
	  	if(dynamicTemplateID != null && !dynamicTemplateID.isEmpty())
    	{
	  		if(dynamicTemplateID.equals("-1")==false)
	  		{
	  		isPrintWithDynamicTemplate = true;
	  		testC = dynamicTemplateID;
	  		}
    	}
	  	Transformer transformer = null;
	  	if(!isPrintWithDynamicTemplate)
	  		transformer = InvestigationTemplateDataHelper.getInstance().getTransformerObject(InvestigationConfig.XSL_RESULTENTRYSTYLESHEET); //tansformerFactory.newTransformer(new StreamSource(path+"ResultEntryStyleSheet.xsl"));
	  	else
	  		transformer = InvestigationTemplateDataHelper.getInstance().getTransformerObject(InvestigationConfig.XSL_DYNAMICRESULTPRINTINGTEMPLATE); //tansformerFactory.newTransformer(new StreamSource(path+"ResultEntryStyleSheet.xsl"));
		//InvestigationDocumentCacheManager documentCacheManager =InvestigationDocumentCacheManager.getInstance();
	  //	transformer = dynamicTransformer;
	  	Node testDocumentNode;
	  	if( resultEntryVO.getParaType()!=null /*||  resultEntryVO.getParaType().equals("2")*/)
	  	{
	  		if(resultEntryVO.getToviewonly()!=null && resultEntryVO.getToviewonly().equals("1"))
	  			testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObjtestwise(InvestigationConfig.XML_TESTREQUISITIONTEMPLATE, testC, session,isPrintWithDynamicTemplate,resultEntryVO.getToviewonly(),"" );
	  		else
	  		 testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObj(InvestigationConfig.XML_TESTREQUISITIONTEMPLATE, testC, session,isPrintWithDynamicTemplate );
	  	}
	  	else
	  	{
	  		
	  		if(resultEntryVO.getToviewonly()!=null && resultEntryVO.getToviewonly().equals("1"))
	  			testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObjtestwise(InvestigationConfig.XML_TESTTEMPLATE, testC, session,isPrintWithDynamicTemplate,resultEntryVO.getToviewonly(),"" );
	  		else{
	  			

	  			//changed by chandan to open normal template from document_store_mst_testwise(xml testwise) inplace of  document_store_mst(all xml )
	  			
	  		  	String hospitalCode = resultEntryVO.getHospitalcode();

	  			//boolean isfetchnormatemplatetestwiseornot = InvestigationTemplateDataHelper.istemplateshowtestwiseornot( hospitalCode);
	  			boolean isfetchnormatemplatetestwiseornot = false;

	  			if(isfetchnormatemplatetestwiseornot)
	  			testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObjtestwise(InvestigationConfig.XML_TESTTEMPLATE, testC, session,isPrintWithDynamicTemplate,"1","" );
	  			else
	  			testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObj(InvestigationConfig.XML_TESTTEMPLATE, testC, session,isPrintWithDynamicTemplate );
	  			
	  			//testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObj(InvestigationConfig.XML_TESTTEMPLATE, testC, session,isPrintWithDynamicTemplate );
	  		}
	  		
		 //testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObj(InvestigationConfig.XML_TESTTEMPLATE, testC, session,isPrintWithDynamicTemplate );
	  	
	  	}
	  	String testCode = resultEntryVO.getTestCode();
	  	String labCode = resultEntryVO.getLabCode();
	  	String hospitalCode = resultEntryVO.getHospitalcode();
		boolean withStandardRanges = InvestigationTemplateDataHelper.getPrintWithStandardRanges(testCode, labCode, hospitalCode);

	  	resultEntryVO.setPrintWithStandardRanges(withStandardRanges);
	  	
	  	if(testDocumentNode == null)
	  	{
	  		System.out.println("No template found");
	  		resultEntryVO.setTemplateDocumentString(null);
	  		return;// resultEntryVO;	  		
	  	}
	  	
	    Document testDocument=InvestigationTemplateDataHelper.getInstance().getNewDocument();
	    Element rootNode=testDocument.createElement("test");
	    rootNode.setAttribute("code",resultEntryVO.getTestCode());
	    //added by chandan for requisition form
	    rootNode.setAttribute("labcode",resultEntryVO.getLabCode());
	    rootNode.setAttribute("sessionNo","2");//resultEntryVO.getSessionId());
 
	    rootNode.setAttribute("requisitionDNo",resultEntryVO.getRequisitionDNo());
	    rootNode.setAttribute("testName",resultEntryVO.getTestName());
	   // LOGGER_INV.log(Level.INFO,"requisitionDNo::"+resultEntryVO.getRequisitionDNo());
	    testDocument.appendChild(rootNode);
	    rootNode.appendChild(testDocument.importNode(testDocumentNode, true));
	   // LOGGER_INV.log(Level.INFO,testDocument.getTextContent());
	    
	    resultEntryVO.setTestDocument(testDocument);
	    processTheTestDocument(resultEntryVO,testDocument, session);
	    
	  // LOGGER_INV.log(Level.INFO,"getResultEntryTemplatedocument + 2");     
	   TemplateQueryParameterVO templateQueryParameterVO=new TemplateQueryParameterVO();
	  // LOGGER_INV.log(Level.INFO,"getResultEntryTemplatedocument + 2.1");    
	   HelperMethods.populate( templateQueryParameterVO,resultEntryVO);
	  // LOGGER_INV.log(Level.INFO,"getResultEntryTemplatedocument + 2.2");
	   
	   //Commented by Siddharth
	   // Date: 13/04/2015
	   // Use: It is used to process the queryValue element. So the value of the query is executed and put in the template.
	   //InvRequisitionFormDATA.processTheDatabaseElements(testDocument.getFirstChild(), templateQueryParameterVO, null);
	   
	 //  LOGGER_INV.log(Level.INFO,"getResultEntryTemplatedocument + 3");   
	   templateQueryParameterVO=null;
	        
	      //  LOGGER_INV.log(Level.INFO,"root Node   = "+testDocument.getFirstChild().getNodeName());
	      
	        // here requisition form and sample collection template is gona add
	   /**
	    * Commented by Siddharth 
	    * Date: 13/04/2015
	    */
	     /*   if(resultEntryVO.getIsRequisitionFormRequired().equals("1"))
	        {
	        	String requisitionDNo=(resultEntryVO.getAssociatedToWorkOrder()==null||(resultEntryVO.getAssociatedToWorkOrder().equals("")))?resultEntryVO.getRequisitionDNo():resultEntryVO.getAssociatedToWorkOrder();
	        	
	        	Document requisitionTemplate=getRequisitionTemplate(requisitionDNo,index);
		        if(requisitionTemplate!=null)
		        {
		        rootNode.appendChild(testDocument.importNode(requisitionTemplate.getFirstChild(),true));
		        }
	        }
	       
	        if(resultEntryVO.getIsSampleCollectionFormRequired().equals("1"))
	        {
	        Document sampleCollectionTemplate=getSampleCollectionTemplate(resultEntryVO.getRequisitionDNo(),index);
		        if(sampleCollectionTemplate!=null)
		        {
		        rootNode.appendChild(testDocument.importNode(sampleCollectionTemplate.getFirstChild(),true));
		        }
	        }
	        */
	        //code modified till here 
	      
	        Source domSource=new DOMSource(testDocument);
		 	java.io.CharArrayWriter baos=new java.io.CharArrayWriter();
		 	StreamResult streamResult=new StreamResult(baos) ;
		 	transformer.setParameter("workOrder", resultEntryVO.getRequisitionDNo()==null?"": resultEntryVO.getRequisitionDNo());
		 	transformer.setParameter("workOrderIndex",index );

		 	transformer.setParameter("multisessionid","2");//resultEntryVO.getSessionId());
 

		 	transformer.setParameter("workOrderGroupIndex",workOrderGroupIndex);
		 	transformer.transform(domSource,streamResult);	
//		 	if(resultEntryVO.isDoCreateTemplate())
//		 	{
		 	String str = baos.toString();
		 	str = str.replace("&lt;","<");
		 	str = str.replace("&gt;",">");
		 	resultEntryVO.setTemplateDocumentString(str);
		 	session.removeAttribute("xslPrintRequisitionForm");
		 	
		 	session.setAttribute("xslPrintRequisitionForm", str); // for requisition form set xml in session for displaying template on requisition form jsp
//		 	}
//		 	else {
//		 		resultEntryVO.setTemplateDocumentString("");
//		 		resultEntryVO.setTestName("");
//		 	}
		 	
		 	// Siddharth
		 	// for printlng xml
		 	javax.xml.transform.TransformerFactory tfactory = TransformerFactory.newInstance();
		 	javax.xml.transform.Transformer xform = tfactory.newTransformer();
		 	java.io.StringWriter writer = new java.io.StringWriter();
		 	StreamResult result = new javax.xml.transform.stream.StreamResult(writer);
		 	xform.transform(domSource, result);
		 	System.out.println(writer.toString());
		 	session.setAttribute("requiredXML", writer.toString());

		}
		catch(Exception Ex)
		{
			Ex.printStackTrace();
		}
				
	//	return resultEntryVO;
	}
	
	public static void processTheTestDocument(ResultEntryVO resultEntryVO,Document testDocument, HttpSession session)
	{
	//	
		
		
		HashMap<String,String> mp=new HashMap();
		HashMap<String,String> mp_ref=new HashMap();
		
		//List<Entry>  mandatoryInfoDtlList=(List<Entry>)resultEntryDataMap.get("mandatoryInfoDtlList");
		
		HashMap<String, ResultEntryVO> m = new HashMap<String, ResultEntryVO>();
	
		//List<HexaStringClass> rangeFromToList= InvestigationTemplateDataHelper.getInstance().getRangeFromToList(resultEntryVO, "1");//(List<HexaStringClass>)resultEntryDataMap.get("rangeFromToList");
		//List<SiteVO> siteDiagnosisList=(List<SiteVO>)resultEntryDataMap.get("siteDiagnosisDetailList");
		NodeList nodeList = testDocument.getElementsByTagName("element");
		Map<String, ResultEntryVO> dmap = null;
		Map mp1=null;
		for(int i=0;i<nodeList.getLength();i++)
		{
			Node node= nodeList.item(i);
			NamedNodeMap namedNodeAttributesMap=node.getAttributes();
			Node idcNode=namedNodeAttributesMap.getNamedItem("idC");
			
			//LOGGER_INV.log(Level.INFO,"name  ="+idcNode.getNodeName());
			if(idcNode.getNodeValue()!=null && idcNode.getNodeValue().equals("label")==false && idcNode.getNodeValue().equals("")==false
					&&  idcNode.getNodeValue().equals("range") == false)
				{
			
				if(resultEntryVO.getDynamnicTemplateResultEntryGroup().equals("1")) {
					String nodeValue = node.getAttributes().getNamedItem("name").getNodeValue();
					String[] splitNodeValue = nodeValue.split("#");
					String stestCode = splitNodeValue[1].substring(0,5);
					dmap = (Map<String,ResultEntryVO>)session.getAttribute("dynamicTests");
					if(dmap.containsKey(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + stestCode))
					{
						resultEntryVO = dmap.get(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + stestCode);
						
					}
					
				}
																						
					
					
//					String rDNo = resultEntryVO.getRequisitionDNo();
//					if(dmap != null && dmap.size() > 0)
//					{
//						for( int k = 0; k < dmap.size(); k++)
//						{
//							if(dmap.containsKey(stestCode))
//							{
//								rDNo = dmap.get(stestCode);
//							}
//						}
//					}

				
				
				
				//if(autocompletion)
				
                    if(resultEntryVO.getParaType()!=null /*|| resultEntryVO.getParaType().equals("2")*/)  //for requisition form by chandan
                    {
                    	
                    	node.getAttributes().getNamedItem("name").setNodeValue(resultEntryVO.getTestCode()+resultEntryVO.getLabCode()+"#"+resultEntryVO.getSessionId()+"#"+node.getAttributes().getNamedItem("name").getNodeValue());
                    }
                    else
					node.getAttributes().getNamedItem("name").setNodeValue(resultEntryVO.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#"+node.getAttributes().getNamedItem("name").getNodeValue());
					// for hyperlink
					
					//node.getAttributes().getNamedItem("value").setNodeValue(resultEntryVO.getTestCode() +"#" + resultEntryVO.getSampleNo()+"#"+resultEntryVO.getLaboratoryCode()+"#");
					//LOGGER_INV.log(Level.INFO,"Node Name = "+node.getAttributes().getNamedItem("name").getNodeValue());
					
					
					//defaultValues
					List<TriStringObject> defaultValues = InvestigationTemplateDataHelper.getDefaultValues(resultEntryVO);
					for(TriStringObject triStringObject:defaultValues)
					{						
						if(idcNode.getNodeValue().equals("autocomplete"))
						{
						NodeList childOptions = node.getChildNodes().item(0).getChildNodes();
						int len = childOptions.getLength();
						String autoList="";
						List<String> lstAutoList=new ArrayList<String>();
						int c=0;
						for(c=0;c<len-1;c++)
						{
							
							 autoList+="{\"label\":\""+childOptions.item(c).getAttributes().getNamedItem("label").getNodeValue()+"\" ,  \"value\": \""+childOptions.item(c).getAttributes().getNamedItem("value").getNodeValue()+"\" }";
							autoList+=",";
							/*cannedDetails+="{\"label\":\""+splitCannedDetails[i].split("#")[0]+"\" ,  \"value\": \""+splitCannedDetails[i].split("#")[0]+"\" }";
					   		cannedDetails+=","; 
					   		
					   		  }
					            	
					            	
					            	 AddRowToTableAddMoreValue(splitCannedDetails[i]);
					            		cannedDetails+="{\"label\":\""+splitCannedDetails[i].split("#")[0]+"\" ,  \"value\": \""+splitCannedDetails[i].split("#")[0]+"\" }";
					            //	alert(cannedDetails.length);
					            	
					            	cannedDetails="["+cannedDetails.toString()+"]";	*/
							
							
						}
												
						autoList+="{\"label\":\""+childOptions.item(c).getAttributes().getNamedItem("label").getNodeValue()+"\" ,  \"value\": \""+childOptions.item(c).getAttributes().getNamedItem("value").getNodeValue()+"\" }";
						autoList="["+autoList.toString()+"]";
						autoList=autoList.toString();
						lstAutoList.add(autoList);
						mp_autolist.put(node.getAttributes().getNamedItem("id").getNodeValue(), lstAutoList);
						}
						
						//LOGGER_INV.log(Level.INFO,"triStringObject Name ="+(resultEntryVO.getRequisitionDNo()+"#template#"+triStringObject.getDesc()+triStringObject.getName()));
						//chandan
						//for requisition form modified by chandan
						if(resultEntryVO.getParaType()!=null /*|| resultEntryVO.getParaType().equals("2")*/)
						{
							if((resultEntryVO.getTestCode()+resultEntryVO.getLabCode()+"#"+resultEntryVO.getSessionId()+"#template#"+triStringObject.getDesc()).equals(node.getAttributes().getNamedItem("name").getNodeValue()))						
								node.getAttributes().getNamedItem("value").setNodeValue(convertValueToHtml(triStringObject.getCode()));
							
						}
						else
						{
							
						if((resultEntryVO.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#template#"+triStringObject.getDesc()).equals(node.getAttributes().getNamedItem("name").getNodeValue()))						
						{ 
							//added by prashant for getting seq_id of default hgstr_value
							 if(idcNode.getNodeValue()!=null && idcNode.getNodeValue().equals("Select") && idcNode.getNodeValue().equals("")==false)
							  { String testcode=triStringObject.getDesc().substring(0, 5);
							     String paramcode=triStringObject.getDesc().substring(5, 9);
							     String seq_idOfdefaultvalue = InvestigationTemplateDataHelper.getDefaultValues2(testcode,paramcode);
								 node.getAttributes().getNamedItem("value").setNodeValue(convertValueToHtml(seq_idOfdefaultvalue));
								// node.getAttributes().getNamedItem("value").setNodeValue(convertValueToHtml(triStringObject.getCode()));
							  }
							 else
							 {
								 node.getAttributes().getNamedItem("value").setNodeValue(convertValueToHtml(triStringObject.getCode()));
							 }
							}
						}
					//	System.out.println("chandan:"+node.getAttributes().getNamedItem("name").getNodeValue());
					
					String testparacode=node.getAttributes().getNamedItem("name").getNodeValue();
					
					String  testparacode1=testparacode.split("#")[3];
					resultEntryVO.setTestParaMeterCode(testparacode1);
					
					}
					
					/*
					 * Commented by Siddharth
					 * Date: 13/04/2015*/
					
					
					if(resultEntryVO.getParameterCombo() == null)
					{
						resultEntryVO.setParameterCombo(new ArrayList<ResultEntryVO>());
						//saved anti biotic data
					}
					
					
					if(resultEntryVO.getGetantibioticlistdynamic() == null)
					{
						resultEntryVO.setGetantibioticlistdynamic(new ArrayList<invAntibioticProcessVO>());
						//whole anti data
					}
					
					if(resultEntryVO.getGetfunguslistdynamic() == null) //fungus
					{
						resultEntryVO.setGetfunguslistdynamic(new ArrayList<invFungusProcessVO>());
						//whole anti data
					}
					
					//modified by chandan for requisition form
			//to fetch saved data and whole list
						Map resultEntryDataMap= InvResultValidationDATA.getResultEntryData(resultEntryVO);
					
					if(resultEntryVO.getRequisitionDNo()!=null)
					{
						
					
					List<TriStringObject> resultValidationDataList=(List<TriStringObject>)resultEntryDataMap.get("resultValidationDataList");
					
					
					
					 for(TriStringObject triStringObject:resultValidationDataList)
					{
						 String testing=resultEntryVO.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#template#"+triStringObject.getDesc();
						 String fetched_testing=node.getAttributes().getNamedItem("name").getNodeValue();
						 
						 //check if multi value list box
						 String[] multivalue = null;

							if (triStringObject.getCode().contains("$"))
								multivalue = triStringObject.getCode().split("\\$");
						 
						 
						//LOGGER_INV.log(Level.INFO,"triStringObject Name ="+(resultEntryVO.getRequisitionDNo()+"#template#"+triStringObject.getDesc()+triStringObject.getName()));
						 //modified by chandan for requisition form
							if((resultEntryVO.getTestCode()+resultEntryVO.getLabCode()+"#"+resultEntryVO.getSessionId()+"#template#"+triStringObject.getDesc()).equals(node.getAttributes().getNamedItem("name").getNodeValue()))
							{
								
									if (multivalue == null)//not list box
									node.getAttributes().getNamedItem("value").setNodeValue(convertValueToHtml(triStringObject.getCode()));
									resultEntryVO.setPreviousValue(triStringObject.getCode());
									
									
									//fetching data of datalist for autocomplete functionality
									/*if(node.hasChildNodes())
										if(node.getChildNodes().item(0).getNodeName().equals("datalist")==true)
										{
											
											NodeList childOptions = node.getChildNodes().item(0).getChildNodes();

											int len = childOptions.getLength();
											
											
											
										}*/
									
									
									
									
									
									
									if(multivalue!=null)
									{
									NodeList optionList = node.getChildNodes();
									Node optionValue = optionList.item(0);

									NodeList childOptions = optionValue.getChildNodes();

									int len = childOptions.getLength();
									
									// .getAttributes().getNamedItem("value").setNodeValue(convertValueToHtml(value));

									// String valuein=optionsList.toString();
									
										for (String selectedValue : multivalue)
											for (int x = 0; x < len; x++) {
												Node value1 = childOptions.item(x);
												String adasa = value1.getAttributes()
														.getNamedItem("value")
														.getNodeValue();
												if (value1.getAttributes()
														.getNamedItem("value")
														.getNodeValue()
														.equals(selectedValue)) { 
													 value1.getAttributes().getNamedItem("selected").setNodeValue("true");

													//Element abcd = (Element) value1;
													//abcd.setAttribute("selected", "true");

												}

											}
									}
									
								}
							
							
							else
							{
							
							if((resultEntryVO.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#template#"+triStringObject.getDesc()).equals(node.getAttributes().getNamedItem("name").getNodeValue()))
						{	
							if (multivalue == null)//not list box
							node.getAttributes().getNamedItem("value").setNodeValue(convertValueToHtml(triStringObject.getCode()));
							resultEntryVO.setPreviousValue(triStringObject.getCode());
							
							
							//fetching data of datalist for autocomplete functionality
							/*if(node.hasChildNodes())
								if(node.getChildNodes().item(0).getNodeName().equals("datalist")==true)
								{
									
									NodeList childOptions = node.getChildNodes().item(0).getChildNodes();

									int len = childOptions.getLength();
									
									
									
								}*/
							
							
							
							
							
							
							if(multivalue!=null)
							{
							NodeList optionList = node.getChildNodes();
							Node optionValue = optionList.item(0);

							NodeList childOptions = optionValue.getChildNodes();

							int len = childOptions.getLength();
							
							// .getAttributes().getNamedItem("value").setNodeValue(convertValueToHtml(value));

							// String valuein=optionsList.toString();
							
								for (String selectedValue : multivalue)
									for (int x = 0; x < len; x++) {
										Node value1 = childOptions.item(x);
										String adasa = value1.getAttributes()
												.getNamedItem("value")
												.getNodeValue();
										if (value1.getAttributes()
												.getNamedItem("value")
												.getNodeValue()
												.equals(selectedValue)) { 
											 value1.getAttributes().getNamedItem("selected").setNodeValue("true");

											//Element abcd = (Element) value1;
											//abcd.setAttribute("selected", "true");

										}

									}
							}
							
						}
							}
						
					}
					 
					}	 
					 
					 /*chandan for hyperlink*/
					 List<ResultEntryVO> siteDiagnosisList=(List<ResultEntryVO>)resultEntryDataMap.get("hyperlinkdatalist");
					 
				/*	 List<ResultEntryVO> siteDiagnosisListnew=	 (List<ResultEntryVO>) session.getAttribute(InvestigationConfig.HYPER_LINK_DATA_LIST);
					 
					
					 if(siteDiagnosisListnew!=null)
					 siteDiagnosisList.addAll(siteDiagnosisListnew);
				*/	 
					 session.setAttribute(InvestigationConfig.HYPER_LINK_DATA_LIST, siteDiagnosisList);
					/*session.setAttribute(InvestigationConfig.HYPER_LINK_DATA_LIST, resultEntryVO.getParameterCombo());*/
					 
					 
					 List<invAntibioticProcessVO> antibioticlist=(List<invAntibioticProcessVO>)resultEntryDataMap.get("antibioticlistt");
						
					 session.setAttribute(InvestigationConfig.ANTIBIOTIC_COMBO, antibioticlist);
					  
					 
					 if(siteDiagnosisList!=null && !(siteDiagnosisList.size()==0) && idcNode.getNodeValue()!=null && idcNode.getNodeValue().equalsIgnoreCase("hyperlink")==true)
					 {
						// node.getAttributes().getNamedItem("tbl").setNodeValue(resultEntryVO.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#"+node.getAttributes().getNamedItem("name").getNodeValue());
						 
						 
						 
						 for(int pi = 0; pi < siteDiagnosisList.size(); pi++) {
							 ResultEntryVO vo=siteDiagnosisList.get(pi);
						 if( (vo.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#template#"+vo.getTestParaMeterCode()).equals(node.getAttributes().getNamedItem("name").getNodeValue()))
						 {
						 	
							 System.out.println("enter");
							 String table1= createTableStringForTheResultTemplatePage(siteDiagnosisList,resultEntryVO,session);
						 node.getAttributes().getNamedItem("tbl").setNodeValue((convertValueToHtml(table1)));
						 
						 }
						 }
						 
				    }
				   
					 
					 
					 
					 
					/*get the reference range based on Normal, Gender, Age */
					 List<TestMandRefMasterVO > objRefRangeList = InvestigationTemplateDataHelper.getInstance().getReferanceRange(resultEntryVO.getHospitalcode());
					 String id = node.getAttributes().getNamedItem("name").getNodeValue();
						String[] codes = id.split("#");
						String testCode = null;
						String paraCode = null;
						String Gender=resultEntryVO.getPatGender();
						String Age=resultEntryVO.getPatAge();
						if(codes != null && codes.length == 4)
						{
							if(codes[3].length()>9)
								{
								
								testCode=codes[3].substring(codes[3].length()-9, codes[3].length()-4);
								paraCode=codes[3].substring(codes[3].length()-4, codes[3].length());
								
								  
								
								}
							
							else
							{
							testCode = codes[3].substring(0,5);
							paraCode = codes[3].substring(5);
							}
						}
						//mp.put(paraCode+"previousValue", resultEntryVO.getPreviousValue());						
						
						mp.put(codes[3]+"previousValue", resultEntryVO.getPreviousValue());
						if(mp.containsKey(codes[3]) == false)
						{
						//	System.out.println("Siddharth: Inside Template Processing Use and adding paraCode for those which doesn't exist " + paraCode);
						//	mp.put(paraCode, "");
							mp.put(codes[3], "");
						}
						 List<InvCriteriaCodeVO > objCriteriaCodeList = InvestigationTemplateDataHelper.getInstance().getCriteriaCode();
						 if(mp.containsKey(codes[3]) == false)
							{
							//	System.out.println("Siddharth: Inside Template Processing Use and adding paraCode for those which doesn't exist " + paraCode);
								//mp.put(paraCode, "");
								mp.put(codes[3], "");
							}	 
						 
						 if(resultEntryVO.getRequisitionDNo()!=null )
								System.out.println("range call dno::"+resultEntryVO.getRequisitionDNo());
						
							if(resultEntryVO.getPatCRNo()!=null )
								System.out.println("range call crno::"+resultEntryVO.getPatCRNo());
						
							if(testCode!=null)
							System.out.println("range call testcode::"+testCode);
							
							
					 String strReferanceRange = getReferenceRange(objRefRangeList, objCriteriaCodeList, testCode, paraCode,  Gender,  Age);
					if(strReferanceRange!=null)
					 strReferanceRange=strReferanceRange.replace("$", "#");
					//For testing(Siddharth) remove later
					Element newRangeNodeElement=testDocument.createElement("rangetag"); 
					
					if(resultEntryVO.getPrintWithStandardRanges() == true)
					{
						
						
						
						if(strReferanceRange != null )
						{
							String[] strValue = strReferanceRange.split("#");
							
							if(strValue[0].equals("1")) // from-to range
							{
							String strRefRange = strValue[2] +"-"+strValue[1]+" "+strValue[4];
							System.out.println("rangee1:"+strRefRange);
							newRangeNodeElement.setAttribute("rangetype",strValue[0]);
							newRangeNodeElement.setAttribute("rangefrom",strValue[2]);
							newRangeNodeElement.setAttribute("rangefromunit",strValue[4]);
							newRangeNodeElement.setAttribute("rangeto",strValue[1]);
							newRangeNodeElement.setAttribute("rangetounit",strValue[3]);
							newRangeNodeElement.setAttribute("rangesymbol","");
							strReferanceRange=strReferanceRange.replace("#", "$");
							}//mp.put(paraCode+"refrange", strReferanceRange);
							else // other range
							{
								String strRefRange = strValue[0] +" "+strValue[1]+" "+strValue[2];
								System.out.println("rangee:"+strRefRange);
								newRangeNodeElement.setAttribute("rangetype",strValue[0]);
								String rangesymbol="";
								if(strValue[0].equals("2"))
									rangesymbol=">";
									if(strValue[0].equals("3"))
										rangesymbol=">=";
										if(strValue[0].equals("4"))
											rangesymbol="<";
											if(strValue[0].equals("5"))		
												rangesymbol="<=";
											
								newRangeNodeElement.setAttribute("rangesymbol1",rangesymbol);		
								newRangeNodeElement.setAttribute("rangetoounit",strValue[1]);
								newRangeNodeElement.setAttribute("rangetoo",strValue[2]);
								strReferanceRange=strReferanceRange.replace("#", "$");
							}
							
							mp.put(codes[3]+"refrange", strReferanceRange);
						}
						else
						{
							newRangeNodeElement.setAttribute("rangetype"," ");
						//	newRangeNodeElement.setAttribute("range",strValue[1]);
							newRangeNodeElement.setAttribute("rangefrom"," ");
							newRangeNodeElement.setAttribute("rangefromunit"," ");
							newRangeNodeElement.setAttribute("rangeto"," ");
							newRangeNodeElement.setAttribute("rangetounit"," ");
							newRangeNodeElement.setAttribute("rangesymbol"," ");
							//mp.put(paraCode+"refrange", "");
							mp.put(codes[3]+"refrange", "");
						}
					}
					else
					{
						newRangeNodeElement.setAttribute("rangetype"," ");
						newRangeNodeElement.setAttribute("rangefrom"," ");
						newRangeNodeElement.setAttribute("rangefromunit"," ");
						newRangeNodeElement.setAttribute("rangeto"," ");
						newRangeNodeElement.setAttribute("rangetounit"," ");
						newRangeNodeElement.setAttribute("rangesymbol"," ");
						//mp.put(paraCode+"refrange", "");
						mp.put(codes[3]+"refrange", "");
					}
					node.appendChild(newRangeNodeElement);
				
					if(dmap != null)
						dmap.put(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + resultEntryVO.getTestCode(), resultEntryVO);
				}
			else if(idcNode.getNodeValue()!=null && idcNode.getNodeValue().equals("label")==true)
			{
				if(node.getAttributes().getNamedItem("id") != null )
				{
					String id = node.getAttributes().getNamedItem("id").getNodeValue();
					String[] codes = id.split("#");
					String testCode = null;
					String paraCode = null;
					
				
					if(codes != null && codes.length == 2)
					{
						testCode = codes[1].substring(0,5);
						paraCode = codes[1].substring(5);
					
						if(resultEntryVO.getDynamnicTemplateResultEntryGroup().equals("1")) {
							//String nodeValue = node.getAttributes().getNamedItem("name").getNodeValue();
							//String[] splitNodeValue = nodeValue.split("#");
							//String stestCode = splitNodeValue[1].substring(0,5);
							dmap = (Map<String,ResultEntryVO>)session.getAttribute("dynamicTests");
							
							if(dmap.containsKey(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + testCode))
							{
								resultEntryVO = dmap.get(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + testCode);
							}
							
						}
						
						
						
						String sampleCode = resultEntryVO.getSampleCode();
						String uomCode = resultEntryVO.getUomCode(); // get uom code from resultentry
		
						String loincCode = InvestigationTemplateDataHelper.getInstance().getLoincCode(testCode, paraCode, sampleCode, uomCode);
						if(loincCode != null) {
							node.getAttributes().getNamedItem("value").setNodeValue(node.getAttributes().getNamedItem("value").getNodeValue() + " (" + loincCode + ")");
							resultEntryVO.setLoincCode(loincCode);
						//	System.out.println("Siddharth: Adding Loinc: Inside Template Processing Use " + paraCode);
							//mp.put(paraCode, loincCode);
							mp.put(codes[1], loincCode);
							//resultEntryVO.
							
						}
						else {
							// remove when loinc Codes have been entered
							
							node.getAttributes().getNamedItem("value").setNodeValue(node.getAttributes().getNamedItem("value").getNodeValue() + " ");
							
							//node.getAttributes().getNamedItem("value").setNodeValue(node.getAttributes().getNamedItem("value").getNodeValue() + " (" + "41758-4" + ")");
							resultEntryVO.setLoincCode("");
						//	mp.put(paraCode, "");
							mp.put(codes[1], loincCode);
						}
							
					}
				}
				//Element newLoincCodeElement =testDocument.createElement("loinc"); 
				//newLoincCodeElement.setAttribute("loincCode","loinc");				
				//node.appendChild(newLoincCodeElement);
				if(dmap != null)
					dmap.put(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + resultEntryVO.getTestCode(), resultEntryVO);
			}
			
			
			
		}
		
		resultEntryVO.setParaLoinc(mp);

		session.setAttribute("dynamicTests", dmap);
		session.setAttribute("mpParaLoinc" + resultEntryVO.getRequisitionNo(), mp);

		resultEntryVO.setAutoList(mp_autolist);

	//	resultEntryVO.setRefUOM(mp_ref);			for passing the ref range values fetched 
		//return resultEntryVO;
	}
	
	//added by chandan
	public static String createTableStringForTheResultTemplatePage( List<ResultEntryVO> siteDiagnosisList,ResultEntryVO resultEntryVO,HttpSession ss)
	{
		Map mpp=new HashMap(); 

		
		Map<String,List<ResultEntryVO>> mp=new HashMap(); 

		Map<String,List<ResultEntryVO>> mpfungus=new HashMap(); 

		
		Map<String,List<antibioticprocessVO>> mpBilled12= (Map<String,List<antibioticprocessVO>>)ss.getAttribute(InvestigationConfig.list_in_sessionhyperlinkdata);

		Map<String,List<antibioticprocessVO>> mpBilled12fungus= (Map<String,List<antibioticprocessVO>>)ss.getAttribute(InvestigationConfig.list_fungus_in_sessionhyperlinkdata);

		
		if(mpBilled12fungus==null)
			mpBilled12fungus=new LinkedHashMap<String, List<antibioticprocessVO>>();      
		
		if(mpBilled12==null)
			 mpBilled12=new LinkedHashMap<String, List<antibioticprocessVO>>();      
			
		
		for(int i1=0;i1<siteDiagnosisList.size();i1++)
		{
			List<ResultEntryVO> newselectedWorkOrderList=new ArrayList<ResultEntryVO>();
			List<ResultEntryVO> newselectedWorkOrderListfungus=new ArrayList<ResultEntryVO>();

			List<antibioticprocessVO> newselectedWorkOrderList1=new ArrayList<antibioticprocessVO>();
			List<antibioticprocessVO> newselectedWorkOrderList1fungus=new ArrayList<antibioticprocessVO>();

			
			String organismcode="";
			ResultEntryVO voPat11=siteDiagnosisList.get(i1);
			organismcode=voPat11.getOrganismcode();
			String organismtype=voPat11.getOrganismType();
		     
			
			for(int i11=0;i11<siteDiagnosisList.size();i11++)
			{
				
				ResultEntryVO voPat111=siteDiagnosisList.get(i11);
				antibioticprocessVO vo1=new antibioticprocessVO();
				antibioticprocessVO vo1fungus=new antibioticprocessVO();

				 if(organismcode.equals(voPat111.getOrganismcode()) && organismtype.equals("1"))
				 {
					 newselectedWorkOrderList.add(voPat111);
					 
					vo1.setAntibioticcode(voPat111.getAntibioticcode());
					vo1.setAntibioticname(voPat111.getAntibioticname());
					vo1.setOrganismcode(voPat111.getOrganismcode());
					vo1.setOrganismname(voPat111.getOrganismname());
					vo1.setOrganismName(voPat111.getOrganismname());
					vo1.setGrowth(voPat111.getGrowthcode());
					vo1.setGrowthname(voPat111.getGrowth());
					vo1.setResult(voPat111.getDiagnosiscode());
					vo1.setRemark(voPat111.getRemark());
					vo1.setRequisitionDNo(resultEntryVO.getRequisitionDNo());
					vo1.setRequisitionNo(resultEntryVO.getRequisitionNo());
					vo1.setTestParaCode(resultEntryVO.getTestParaMeterCode());
					 newselectedWorkOrderList1.add(vo1);

					 
				 }
				 else if (organismcode.equals(voPat111.getOrganismcode()) && organismtype.equals("2"))
				 {
					 
					 newselectedWorkOrderListfungus.add(voPat111);
					 
					 vo1fungus.setAntibioticcode(voPat111.getAntibioticcode());
					 vo1fungus.setAntibioticname(voPat111.getAntibioticname());
					 vo1fungus.setOrganismcode(voPat111.getOrganismcode());
					 vo1fungus.setOrganismname(voPat111.getOrganismname());
					 vo1fungus.setOrganismName(voPat111.getOrganismname());
					 vo1fungus.setGrowth(voPat111.getGrowthcode());
					 vo1fungus.setGrowthname(voPat111.getGrowth());
					 vo1fungus.setResult(voPat111.getDiagnosiscode());
					 vo1fungus.setRemark(voPat111.getRemark());
					 vo1fungus.setRequisitionDNo(resultEntryVO.getRequisitionDNo());
					 vo1fungus.setRequisitionNo(resultEntryVO.getRequisitionNo());
					 vo1fungus.setTestParaCode(resultEntryVO.getTestParaMeterCode());
						newselectedWorkOrderList1fungus.add(vo1fungus);
						 
				 }
				
				
			}
			
			if(newselectedWorkOrderList!=null && newselectedWorkOrderList.size()>0)
			{
				mp.put(organismcode, newselectedWorkOrderList);
				mpBilled12.put(resultEntryVO.getRequisitionDNo()+"#"+organismcode, newselectedWorkOrderList1);
			}
			
			if(newselectedWorkOrderListfungus!=null && newselectedWorkOrderListfungus.size()>0)
			{
				
			mpfungus.put(organismcode, newselectedWorkOrderListfungus);
			
			mpBilled12fungus.put(resultEntryVO.getRequisitionDNo()+"#"+organismcode, newselectedWorkOrderList1fungus);
			}
			

			
				//mpp.put(InvestigationConfig.list_in_sessionhyperlinkdata,mpBilled12);
                     ss.setAttribute(InvestigationConfig.list_in_sessionhyperlinkdata,mpBilled12);
                     
                     ss.setAttribute(InvestigationConfig.list_fungus_in_sessionhyperlinkdata,mpBilled12fungus); //fungus
               	  
		
		}
		
		
		String tablefinal1="";
		  if(mp!=null && mp.size()>0)
		  {
			  Iterator itr=mp.keySet().iterator();
			  while(itr.hasNext())
		 		{
		 			String organisgm1=(String)itr.next();

		 			List<ResultEntryVO> lstVOSample=mp.get(organisgm1);

		 			
				  String tableString="<table width='100%'>";
					
					String firstRow="<tr><td width='50%'><div align='left'><b> Organisms Name </b></div></td>";
					String width=50+"%";
					String width111=30+"%";
					if(lstVOSample!=null && lstVOSample.size()>0)
					{
					ResultEntryVO voPat=lstVOSample.get(0);
						
						firstRow+="<td width='"+width+"'><div align='left'>"+voPat.getOrganismname()+"</div></td>";
						
						tableString+=firstRow+"</tr>";
					
						String firstRow121="<tr><td width='50%'><div align='left'><b> Growth  </b></div></td>";	
						firstRow121+="<td width='"+width+"'><div align='left'>"+voPat.getGrowth()+"</div></td>";
						tableString+=firstRow121+"</tr>";

						
						String tableString1="";
					String firstRow1="";
					firstRow1+="<tr><td width='35%'><div align='left'><b>"+"Antibiotic Name"+"</b></div></td>";	
					firstRow1+="<td width='35%'><div align='left'><b>"+"Result"+"</b></div></td>";
			         firstRow1+="<td width='30%'><div align='left'><b>"+"Remark"+"</b></div></td></tr>";
			         for(int k=0;k<lstVOSample.size();k++)
			 			{
			        	 ResultEntryVO voPat1=lstVOSample.get(k);
						
						 firstRow1+="<tr><td width='35%'><div align='left'>"+voPat1.getAntibioticname()+"</div></td>";
						
									firstRow1+="<td width='35%'><div align='left'>"+voPat1.getDiagnosis()+"</div></td>";
									
							firstRow1+="<td width='30%'><div align='left'>"+voPat1.getRemark()+"</div></td></tr>";

					}
					
					

					tableString1+=firstRow1+"</table><br/><br/>";
					
					 tablefinal1+=	tableString+tableString1;
					}
					
		 		}
		  }
		

		  if(mpfungus!=null)
		  {
			  Iterator itr=mpfungus.keySet().iterator();
			  while(itr.hasNext())
		 		{
		 			String organisgm1=(String)itr.next();

		 			List<ResultEntryVO> lstVOSample=mpfungus.get(organisgm1);

		 			if(lstVOSample!=null && lstVOSample.size()>0)
					{
				  String tableString="<table width='100%'>";
					
					String firstRow="<tr><td width='50%'><div align='left'><b> Fungus Name </b></div></td>";
					String width=50+"%";
					String width111=30+"%";
					ResultEntryVO voPat=lstVOSample.get(0);
						
						firstRow+="<td width='"+width+"'><div align='left'>"+voPat.getOrganismname()+"</div></td>";
						
						tableString+=firstRow+"</tr>";
					
						String firstRow121="<tr><td width='50%'><div align='left'><b> Growth  </b></div></td>";	
						firstRow121+="<td width='"+width+"'><div align='left'>"+voPat.getGrowth()+"</div></td>";
						tableString+=firstRow121+"</tr>";

						
						String tableString1="";
					String firstRow1="";
					firstRow1+="<tr><td width='35%'><div align='left'><b>"+"Antibiotic Name"+"</b></div></td>";	
					firstRow1+="<td width='35%'><div align='left'><b>"+"Result"+"</b></div></td>";
			         firstRow1+="<td width='30%'><div align='left'><b>"+"Remark"+"</b></div></td></tr>";
			         for(int k=0;k<lstVOSample.size();k++)
			 			{
			        	 ResultEntryVO voPat1=lstVOSample.get(k);
						
						 firstRow1+="<tr><td width='35%'><div align='left'>"+voPat1.getAntibioticname()+"</div></td>";
						
									firstRow1+="<td width='35%'><div align='left'>"+voPat1.getDiagnosis()+"</div></td>";
									
							firstRow1+="<td width='30%'><div align='left'>"+voPat1.getRemark()+"</div></td></tr>";

					}
					
					

					tableString1+=firstRow1+"</table><br/><br/>";
					
					 tablefinal1+=	tableString+tableString1;
					}
		 		}
		  }
		  
		
		String table="<table width='100%'><tr><td width='100%'><fieldset><font size='1px'><u>Interpretaion</u>:<br/><p>Sensitive (S): Infection is expected to respond to treatment with normal doses.</p><br/><p>Moderate Sensitive (MS): Infection may respond to treatment with higher doses.</p><br/><p>Resistance (R): Clinical respose is unlikey even with maximum tolerated doses.</p></font></fieldset></td></tr></table>";	

		
		
		
	String tablefinal=	tablefinal1+table;
	
		
		
		
		
		//String tablefinal="";
		
			/*ResultEntryVO voPat=siteDiagnosisList.get(0);*/
			
		/*for(int i1=0;i1<siteDiagnosisList.size();i1++)
		{
			int count=1;
			String tableString="<table width='100%'>";
			String firstRow="<tr><td width='50%'><div align='center'><b> Organisms Name </b></div></td>";
			String width=50+"%";
			
			ResultEntryVO voPat11=siteDiagnosisList.get(i1);
			if(voPat11.getOrganismname()!=null)
			{
		
		
				
				for(int i=0;i<siteDiagnosisList.size();i++)
				{
					ResultEntryVO voPat1=siteDiagnosisList.get(i);
					
					if(voPat1.getRequisitionDNo().equals(resultEntryVO.getRequisitionDNo()) && voPat1.getTestParaMeterCode().equals(resultEntryVO.getTestParaMeterCode()))
					{
						if(count==1)
						{
						firstRow+="<td width='"+width+"'><div align='center'>"+voPat1.getOrganismname()+"</div></td>";
						
						tableString+=firstRow+"</tr>";
						}
					count++;		
					}
					
				}
				
			
			
			String tableString1="";
		String firstRow1="";
		firstRow1+="<tr><td width='50%'><div align='center'><b>"+"Antibiotic Name"+"</b></div></td>";	
		firstRow1+="<td width='"+width+"'><div align='center'><b>"+"Result"+"</b></div></td></tr>";
		for(int i=0;i<siteDiagnosisList.size();i++)
		{
			ResultEntryVO voPat1=siteDiagnosisList.get(i);
			
			if(voPat1.getRequisitionDNo().equals(resultEntryVO.getRequisitionDNo()) && voPat1.getTestParaMeterCode().equals(resultEntryVO.getTestParaMeterCode()))
			{
			 firstRow1+="<tr><td width='50%'><div align='center'>"+voPat1.getAntibioticname()+"</div></td>";
			firstRow1+="<td width='"+width+"'><div align='center'>"+voPat1.getDiagnosis()+"</div></td></tr>";
			}
		}
			
		
		
		String table="<table width='100%'><tr><td width='100%'><fieldset><font size='1px'><u>Interpretaion</u>:<br/><p>Sensitive (S): Infection is expected to respond to treatment with normal doses.</p><br/><p>Intermediate (IS): Infection may respond to treatment with higher doses.</p><br/><p>Resistant (R): Clinical respose is unlikey even with maximum tolerated doses.</p></font></fieldset></td></tr></table>";	

		
		tableString1+=firstRow1+"</table>";
		

		
		
		System.out.println(tableString+tableString1+table);

	 tablefinal=	tableString+tableString1+table;
			}}*/
		
		
	 return tablefinal;
	
	}
	
			
		/*String[] organismrows=fb.getChkSamplePatient();
		String tableString="<table width='100%'>";
		String firstRow="<tr><td width='100%'><table width='100%' cellspacing='1px' cellpadding='1px' bordercolor='#FFB366' border='1px'><tr><td width='34%'><div align='center'><b>AntiBiotics / Organisms </b></td>";
		String width=66/organismrows.length+"%";
		for(String organismtd:organismrows)
		{
			firstRow+="<td width='"+width+"'><div align='center'><b>"+organismtd+"</b></div></td>";
		}
		tableString+=firstRow+"</tr></table></td></tr>";
		
		for(invAntibioticProcessVO antiBioticVOClass:antiBioticVOClasses)
		{
			String rowString="<tr><td width='100%'><table width='100%' cellspacing='1px' cellpadding='1px' bordercolor='#FFB366' border='1px'><tr><td width='34%'><div align='left'><b>"+antiBioticVOClass.getAntibioticClassName()+"</b></div></td></tr>";
			for(invAntibioticProcessVO antiBioticVO : antiBioticVOClass.getAntibioticList())
			{
				rowString+="<tr><td width='34%'><div align='right'><b>"+antiBioticVO.getAntibioticName()+"</b></div></td>";
				for(invAntibioticProcessVO organismVO  :antiBioticVO.getOrganismList())
				{
					rowString+="<td width='"+width+"'><div align='center'>"+organismVO.getValue()+"</div></td>";
				}
				rowString+="</tr>";
				
			}
			
			rowString+="</table></td></tr>";
			tableString+=rowString;
		}
		
		
		
		tableString+="</table>";
		//LOGGER_INV.log(Level.INFO,tableString);
		request.getSession().setAttribute("tableString", tableString);*/
		/*System.out.println(tableString);*/
		
	
	
	
	
	/*
	 * public static String getReferenceRange( List<TestMandRefMasterVO >
	 * objRefRangeList, List<InvCriteriaCodeVO > objCriteriaCodeList, String
	 * strTestCode, String strTestParaCode, String strGender, String strAge) {
	 * String strCriteriaCode =null; String strReferanceRangeString = null;
	 * for(InvCriteriaCodeVO objCriteriaCodeVO : objCriteriaCodeList) {
	 * 
	 * if(strTestCode.equalsIgnoreCase(objCriteriaCodeVO.getTestCode()) &&
	 * strTestParaCode.equalsIgnoreCase(objCriteriaCodeVO.getParamterCode())) {
	 * strCriteriaCode = objCriteriaCodeVO.getCriteriaCode(); break; } }
	 * 
	 * for(TestMandRefMasterVO objRefRange : objRefRangeList) { if(
	 * InvestigationConfig.REFERENCE_RANGE_CRITERIA_NORMAL.equalsIgnoreCase(
	 * strCriteriaCode)) {
	 * if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) &&
	 * objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode)) {
	 * if(objRefRange.getRangeTyp().equalsIgnoreCase("1")) // range from-to
	 * strReferanceRangeString = objRefRange.getRangeTyp() + "$" +
	 * objRefRange.getHighValue() + "$" + objRefRange.getLowValue() + "$" +
	 * objRefRange.getHighValueUom() + "$" + objRefRange.getLowValueUom() + "$" +
	 * objRefRange.getSymbol() ; else strReferanceRangeString =
	 * objRefRange.getRangeTyp() + "$" + objRefRange.getRangeUom() + "$" +
	 * objRefRange.getRange() +"$" + objRefRange.getSymbol() ; // for range like >,<
	 * (unit,range,symbol) break; } }
	 * 
	 * 
	 * if( InvestigationConfig.REFERENCE_RANGE_CRITERIA_AGE.equalsIgnoreCase(
	 * strCriteriaCode)&&objRefRange.getLowAge()!=null) {
	 * 
	 * 
	 * double lowAge=Double.valueOf(objRefRange.getLowAge());
	 * 
	 * if(objRefRange.getLowAgeUom().equals("1")) ; else
	 * if(objRefRange.getLowAgeUom().equals("2")) lowAge=lowAge/12; else
	 * lowAge=lowAge/365;
	 * 
	 * 
	 * 
	 * 
	 * double highAge=Double.valueOf(objRefRange.getHighAge());
	 * 
	 * 
	 * if(objRefRange.getHighAgeUom().equals("1")) ; else
	 * if(objRefRange.getHighAgeUom().equals("2")) highAge=highAge/12; else
	 * highAge=highAge/365;
	 * 
	 * //System.out.println("refRangelowAge"+lowAge);
	 * System.out.println("refRangehighAge"+strAge); String[]
	 * splitAge=strAge.split(" "); double Age=Double.valueOf(splitAge[0]); String
	 * ageUom=splitAge[1];
	 * 
	 * if(ageUom.equals("Yr")) ; else if(ageUom.equals("Wk")) Age=Age/52; else
	 * if(ageUom.equals("Mth")) Age=Age/12; else Age=Age/365;
	 * 
	 * 
	 * 
	 * //System.out.println("refRangeAge"+Age);
	 * 
	 * if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) &&
	 * objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode)&&lowAge<=Age
	 * && highAge>=Age) { if(objRefRange.getRangeTyp().equalsIgnoreCase("1")) //
	 * range from-to strReferanceRangeString = objRefRange.getRangeTyp() + "$" +
	 * objRefRange.getHighValue() + "$" + objRefRange.getLowValue() + "$" +
	 * objRefRange.getHighValueUom() + "$" + objRefRange.getLowValueUom() + "$" +
	 * objRefRange.getSymbol() ; else strReferanceRangeString =
	 * objRefRange.getRangeTyp() + "$" + objRefRange.getRangeUom() + "$" +
	 * objRefRange.getRange() +"$" + objRefRange.getSymbol() ; // for range like >,<
	 * (unit,range,symbol) break; }
	 * 
	 * 
	 * }
	 * 
	 * if( InvestigationConfig.REFERENCE_RANGE_CRITERIA_GENDER.equalsIgnoreCase(
	 * strCriteriaCode)) {
	 * 
	 * System.out.println("refGender"); String gender=""; if(strGender.equals("M"))
	 * { gender="0"; } if(strGender.equals("F")) { gender="1"; }
	 * 
	 * System.out.println("refGender"+gender);
	 * 
	 * if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) &&
	 * objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode)&&objRefRange
	 * .getGender().equals(gender)) {
	 * if(objRefRange.getRangeTyp().equalsIgnoreCase("1")) // range from-to
	 * strReferanceRangeString = objRefRange.getRangeTyp() + "$" +
	 * objRefRange.getHighValue() + "$" + objRefRange.getLowValue() + "$" +
	 * objRefRange.getHighValueUom() + "$" + objRefRange.getLowValueUom() + "$" +
	 * objRefRange.getSymbol() ; else strReferanceRangeString =
	 * objRefRange.getRangeTyp() + "$" + objRefRange.getRangeUom() + "$" +
	 * objRefRange.getRange() +"$" + objRefRange.getSymbol() ; // for range like >,<
	 * (unit,range,symbol)
	 * 
	 * 
	 * 
	 * break; }
	 * 
	 * 
	 * }
	 * 
	 * 
	 * // added by change for ref range GENDER_AGE wise (13)
	 * 
	 * if( InvestigationConfig.REFERENCE_RANGE_CRITERIA_GENDER_AGE.equalsIgnoreCase(
	 * strCriteriaCode)) {
	 * 
	 * System.out.println("refGender-age wise"); String gender="";
	 * if(strGender.equals("M")) { gender="0"; } if(strGender.equals("F")) {
	 * gender="1"; }
	 * 
	 * System.out.println("refGender"+gender);
	 * 
	 * if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) &&
	 * objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode)&&objRefRange
	 * .getGender().equals(gender)) {
	 * 
	 * 
	 * 
	 * double lowAge=Double.valueOf(objRefRange.getLowAge());
	 * 
	 * if(objRefRange.getLowAgeUom().equals("1")) ; else
	 * if(objRefRange.getLowAgeUom().equals("2")) lowAge=lowAge/12; else
	 * lowAge=lowAge/365;
	 * 
	 * 
	 * 
	 * 
	 * double highAge=Double.valueOf(objRefRange.getHighAge());
	 * 
	 * 
	 * if(objRefRange.getHighAgeUom().equals("1")) ; else
	 * if(objRefRange.getHighAgeUom().equals("2")) highAge=highAge/12; else
	 * highAge=highAge/365;
	 * 
	 * //System.out.println("refRangelowAge"+lowAge);
	 * System.out.println("refRangehighAge"+strAge); String[]
	 * splitAge=strAge.split(" "); double Age=Double.valueOf(splitAge[0]); String
	 * ageUom=splitAge[1];
	 * 
	 * if(ageUom.equals("Yr")) ; else if(ageUom.equals("Wk")) Age=Age/52; else
	 * if(ageUom.equals("Mth")) Age=Age/12; else Age=Age/365;
	 * 
	 * if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) &&
	 * objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode)&&lowAge<=Age
	 * && highAge>=Age) {
	 * 
	 * if(objRefRange.getRangeTyp().equalsIgnoreCase("1")) // range from-to
	 * strReferanceRangeString = objRefRange.getRangeTyp() + "$" +
	 * objRefRange.getHighValue() + "$" + objRefRange.getLowValue() + "$" +
	 * objRefRange.getHighValueUom() + "$" + objRefRange.getLowValueUom() + "$" +
	 * objRefRange.getSymbol() ; else strReferanceRangeString =
	 * objRefRange.getRangeTyp() + "$" + objRefRange.getRangeUom() + "$" +
	 * objRefRange.getRange() +"$" + objRefRange.getSymbol() ; // for range like >,<
	 * (unit,range,symbol) break; } }
	 * 
	 * 
	 * }
	 * 
	 * } System.out.println("strReferanceRangeString"+strReferanceRangeString);
	 * return strReferanceRangeString; }
	 */
	
	
	
public static String getReferenceRange( List<TestMandRefMasterVO > objRefRangeList,  List<InvCriteriaCodeVO > objCriteriaCodeList, String strTestCode, String strTestParaCode, String strGender, String strAge)
{
String strCriteriaCode =null;
String strReferanceRangeString = null;
for(InvCriteriaCodeVO objCriteriaCodeVO : objCriteriaCodeList)
{

if(strTestCode.equalsIgnoreCase(objCriteriaCodeVO.getTestCode()) && strTestParaCode.equalsIgnoreCase(objCriteriaCodeVO.getParamterCode()))
{
strCriteriaCode = objCriteriaCodeVO.getCriteriaCode();
break;
}
}

for(TestMandRefMasterVO objRefRange : objRefRangeList)
{
if( InvestigationConfig.REFERENCE_RANGE_CRITERIA_NORMAL.equalsIgnoreCase(strCriteriaCode))
{
if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) && objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode))
{



boolean isflag=true;

if(objRefRange.getRangeTyp().equalsIgnoreCase("1")  )
{

if(objRefRange.getLowValue()==null)
{
objRefRange.setLowValue("-");
}

if(objRefRange.getHighValue()==null)
{
objRefRange.setHighValue("-");
}

}
else
{

if(objRefRange.getRange()==null)
{
objRefRange.setRange("-");
}

}

if(isflag==true)
{

if(objRefRange.getRangeTyp().equalsIgnoreCase("1")) // range from-to
strReferanceRangeString = objRefRange.getRangeTyp() + "$" + objRefRange.getHighValue() + "$" +  objRefRange.getLowValue() + "$" + objRefRange.getHighValueUom() + "$" + objRefRange.getLowValueUom() + "$" + objRefRange.getSymbol()  ;
else
strReferanceRangeString = objRefRange.getRangeTyp() + "$" + objRefRange.getRangeUom() + "$" +  objRefRange.getRange() +"$" + objRefRange.getSymbol() ;	// for range like >,< (unit,range,symbol)
break;

}
}
}


if( InvestigationConfig.REFERENCE_RANGE_CRITERIA_AGE.equalsIgnoreCase(strCriteriaCode)&&objRefRange.getLowAge()!=null)
{



boolean isflag=false;


System.out.println("REFERENCE_RANGE_CRITERIA_AGE wisee");

String[] splitAgenew=strAge.split(" ");


if(splitAgenew!=null && splitAgenew.length>=2 && splitAgenew[0]!=null && splitAgenew[1]!=null)
if(is_string_double_numeric(splitAgenew[0])) // if age exist
{
isflag=true;


if(objRefRange.getLowAge()==null || objRefRange.getLowAge().equals(""))
{
	objRefRange.setLowAge("0");
}

if(objRefRange.getHighAge()==null || objRefRange.getHighAge().equals(""))
{
	objRefRange.setHighAge("0");
}


if( objRefRange.getRangeTyp().equalsIgnoreCase("1"))
{

 if(objRefRange.getLowValue()==null)
	{
		objRefRange.setLowValue("-");
	}
	
	if(objRefRange.getHighValue()==null)
	{
		objRefRange.setHighValue("-");
	}
 
}
else
{
 if(objRefRange.getRange()==null)
	{
		objRefRange.setRange("-");
	}
 
}


}
else
{
isflag=false;
}




if(isflag==true)
{
double lowAge=Double.valueOf(objRefRange.getLowAge());

if(objRefRange.getLowAgeUom().equals("1"))
;
else if(objRefRange.getLowAgeUom().equals("2"))
lowAge=lowAge/12;
else
lowAge=lowAge/365;




double  highAge=Double.valueOf(objRefRange.getHighAge());


if(objRefRange.getHighAgeUom().equals("1"))
;
else if(objRefRange.getHighAgeUom().equals("2"))
highAge=highAge/12;
else
highAge=highAge/365;

//System.out.println("refRangelowAge"+lowAge);
System.out.println("refRangehighAge"+strAge);
String[] splitAge=strAge.split(" ");
double Age=Double.valueOf(splitAge[0]);
String ageUom=splitAge[1];

if(ageUom.equals("Yr"))
;
else if(ageUom.equals("Wk"))
Age=Age/52;
else if(ageUom.equals("Mth"))
Age=Age/12;
else
Age=Age/365;
						


//System.out.println("refRangeAge"+Age);

if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) && objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode)&&lowAge<=Age && highAge>=Age)
{
if(objRefRange.getRangeTyp().equalsIgnoreCase("1")) // range from-to
strReferanceRangeString = objRefRange.getRangeTyp() + "$" + objRefRange.getHighValue() + "$" +  objRefRange.getLowValue() + "$" + objRefRange.getHighValueUom() + "$" + objRefRange.getLowValueUom() + "$" + objRefRange.getSymbol() ;
else
strReferanceRangeString = objRefRange.getRangeTyp() + "$" + objRefRange.getRangeUom() + "$" +  objRefRange.getRange() +"$" + objRefRange.getSymbol() ;	// for range like >,< (unit,range,symbol)	
break;
}

}
}

if( InvestigationConfig.REFERENCE_RANGE_CRITERIA_GENDER.equalsIgnoreCase(strCriteriaCode))
{

System.out.println("refGender");
String gender="";
if(strGender.equals("M"))
{
gender="0";
}
if(strGender.equals("F"))
{
gender="1";
}

System.out.println("refGender"+gender);


boolean isflag=true;

if(objRefRange.getRangeTyp().equalsIgnoreCase("1")  )
{

if(objRefRange.getLowValue()==null)
{
objRefRange.setLowValue("-");
}

if(objRefRange.getHighValue()==null)
{
objRefRange.setHighValue("-");
}

}
else
{

if(objRefRange.getRange()==null)
{
objRefRange.setRange("-");
}

}




if(isflag==true)
{


if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) && objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode)&&objRefRange.getGender().equals(gender))
{
if(objRefRange.getRangeTyp().equalsIgnoreCase("1")) // range from-to
strReferanceRangeString = objRefRange.getRangeTyp() + "$" + objRefRange.getHighValue() + "$" +  objRefRange.getLowValue() + "$" + objRefRange.getHighValueUom() + "$" + objRefRange.getLowValueUom() + "$" + objRefRange.getSymbol() ;
else
strReferanceRangeString = objRefRange.getRangeTyp() + "$" + objRefRange.getRangeUom() + "$" +  objRefRange.getRange() +"$" + objRefRange.getSymbol() ;	// for range like >,< (unit,range,symbol)	



break;
}

}


}


// added by change for ref range GENDER_AGE wise (13)

if( InvestigationConfig.REFERENCE_RANGE_CRITERIA_GENDER_AGE.equalsIgnoreCase(strCriteriaCode))
{

System.out.println("refGender-age wise");
String gender="";
if(strGender.equals("M"))
{
gender="0";
}
if(strGender.equals("F"))
{
gender="1";
}

System.out.println("refGender"+gender);

if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) && objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode)&&objRefRange.getGender().equals(gender))
{


System.out.println("refRangehighAge"+strAge);
String[] splitAgenew=strAge.split(" ");

boolean isflag=false;


if(splitAgenew!=null && splitAgenew.length>=2 && splitAgenew[0]!=null && splitAgenew[1]!=null)
if(is_string_double_numeric(splitAgenew[0])) // if age exist
{
  isflag=true;

  
  if(objRefRange.getLowAge()==null || objRefRange.getLowAge().equals(""))
	{
		objRefRange.setLowAge("0");
	}
	
	if(objRefRange.getHighAge()==null || objRefRange.getHighAge().equals(""))
	{
		objRefRange.setHighAge("0");
	}
	
	
 if( objRefRange.getRangeTyp().equalsIgnoreCase("1"))
 {
 
	 if(objRefRange.getLowValue()==null)
		{
			objRefRange.setLowValue("-");
		}
		
		if(objRefRange.getHighValue()==null)
		{
			objRefRange.setHighValue("-");
		}
	 
 }
 else
 {
	 if(objRefRange.getRange()==null)
		{
			objRefRange.setRange("-");
		}
	 
 }
 
 
}
else
{
  isflag=false;
}


if(isflag==true)
{

double lowAge=Double.valueOf(objRefRange.getLowAge());

if(objRefRange.getLowAgeUom().equals("1"))
;
else if(objRefRange.getLowAgeUom().equals("2"))
lowAge=lowAge/12;
else
lowAge=lowAge/365;




double  highAge=Double.valueOf(objRefRange.getHighAge());


if(objRefRange.getHighAgeUom().equals("1"))
;
else if(objRefRange.getHighAgeUom().equals("2"))
highAge=highAge/12;
else
highAge=highAge/365;

//System.out.println("refRangelowAge"+lowAge);
System.out.println("refRangehighAge"+strAge);
String[] splitAge=strAge.split(" ");



if(splitAge!=null && splitAge.length>=2 && splitAge[0]!=null && splitAge[1]!=null)
isflag=is_string_double_numeric(splitAge[0]);



double Age=Double.valueOf(splitAge[0]);
String ageUom=splitAge[1];

if(ageUom.equals("Yr"))
;
else if(ageUom.equals("Wk"))
Age=Age/52;
else if(ageUom.equals("Mth"))
Age=Age/12;
else
Age=Age/365;

if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) && objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode)&&lowAge<=Age && highAge>=Age)
{

if(objRefRange.getRangeTyp().equalsIgnoreCase("1")) // range from-to
strReferanceRangeString = objRefRange.getRangeTyp() + "$" + objRefRange.getHighValue() + "$" +  objRefRange.getLowValue() + "$" + objRefRange.getHighValueUom() + "$" + objRefRange.getLowValueUom() + "$" + objRefRange.getSymbol() ;
else
strReferanceRangeString = objRefRange.getRangeTyp() + "$" + objRefRange.getRangeUom() + "$" +  objRefRange.getRange() +"$" + objRefRange.getSymbol() ;	// for range like >,< (unit,range,symbol)	
break;
}
}

}


}

}
System.out.println("strReferanceRangeString"+strReferanceRangeString);
return strReferanceRangeString;
}


	public static synchronized void getTestGroupTemplatedocument(ResultEntryVO resultEntryVOGroupByValidatedBy, int workOrderGroupIndex, HttpSession session)
	{
		
		try
		{			
			//Transformer transformer = InvestigationTemplateDataHelper.getInstance().getTransformerObject(InvestigationConfig.XSL_RESULTENTRYSTYLESHEET); //tansformerFactory.newTransformer(new StreamSource(path+"ResultEntryStyleSheet.xsl"));
			String testC = resultEntryVOGroupByValidatedBy.getLaboratoryCode() +resultEntryVOGroupByValidatedBy.getGroupCode();
			String dynamicTemplateID = InvestigationTemplateDataHelper.getInstance().getDynamicTemplateStatus(testC,resultEntryVOGroupByValidatedBy.getHospitalcode(), true, resultEntryVOGroupByValidatedBy.getLabCode(),resultEntryVOGroupByValidatedBy.getParaType());
		  	boolean isPrintWithDynamicTemplate = false;
		  	
		  	if(dynamicTemplateID != null && !dynamicTemplateID.isEmpty())
	    	{
		  		isPrintWithDynamicTemplate = true;
		  		testC = dynamicTemplateID;
	    	}
		  	Transformer transformer = null;
		  	if(!isPrintWithDynamicTemplate)
		  		transformer = InvestigationTemplateDataHelper.getInstance().getTransformerObject(InvestigationConfig.XSL_RESULTENTRYSTYLESHEET); //tansformerFactory.newTransformer(new StreamSource(path+"ResultEntryStyleSheet.xsl"));
		  	else
		  		transformer = InvestigationTemplateDataHelper.getInstance().getTransformerObject(InvestigationConfig.XSL_DYNAMICRESULTPRINTINGTEMPLATE); //tansformerFactory.newTransformer(new StreamSource(path+"ResultEntryStyleSheet.xsl"));
			//InvestigationDocumentCacheManager documentCacheManager =InvestigationDocumentCacheManager.getInstance();
		  //	transformer = dynamicTransformer;
		  	
		  	
			Node testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObj(InvestigationConfig.XML_TESTTEMPLATE, testC, session,isPrintWithDynamicTemplate );

			
		  	//Node testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObj(InvestigationConfig.XML_LABTESTGROUPTEMPLATE, , session);
		    Document testDocument=InvestigationTemplateDataHelper.getInstance().getNewDocument();
		    if(testDocumentNode!=null)
		    {
	        Element rootNode=testDocument.createElement("testgroup");
	        rootNode.setAttribute("groupcode",resultEntryVOGroupByValidatedBy.getGroupCode());
	        
	        rootNode.setAttribute("requisitionNo",resultEntryVOGroupByValidatedBy.getRequisitionNo());
	        rootNode.setAttribute("groupname",resultEntryVOGroupByValidatedBy.getGroupName());
	        testDocument.appendChild(rootNode);
	        rootNode.appendChild(testDocument.importNode(testDocumentNode, true));
	        
	        resultEntryVOGroupByValidatedBy.setGroupTemplateDocument(testDocument);
	        processTheTestGroupDocument(resultEntryVOGroupByValidatedBy, testDocument);
	     
	        Source domSource=new DOMSource(testDocument);
		 	java.io.CharArrayWriter baos=new java.io.CharArrayWriter();
		 	StreamResult streamResult=new StreamResult(baos) ;
		 	transformer.setParameter("workOrder", resultEntryVOGroupByValidatedBy.getRequisitionNo());
		 	transformer.setParameter("workOrderIndex","NA" );
		 	transformer.setParameter("multisessionid",resultEntryVOGroupByValidatedBy.getGroupCode());
		 	transformer.setParameter("workOrderGroupIndex",workOrderGroupIndex);
		 	transformer.transform(domSource,streamResult);
		 	resultEntryVOGroupByValidatedBy.setGroupTemplateString(baos.toString());
		    }

		}
		catch(Exception Ex)
		{
			Ex.printStackTrace();
		}
				
	}
	
	public static void processTheTestGroupDocument(ResultEntryVO resultEntryVOGroupByValidatedBy,Document testDocument)
	{
		//LOGGER_INV.log(Level.INFO,"----------------inisde result entry process of process the test document");
		
		// Comment by Siddharth: These are used for Result Validation
	//	Map resultEntryDataMap= ResultEntryDATA.getResultEntryGroupData(resultEntryVOGroupByValidatedBy);
	//	List<TriStringObject> resultValidationDataList=(List<TriStringObject>)resultEntryDataMap.get("resultValidationDataList");
		
		NodeList nodeList = testDocument.getElementsByTagName("element");
		for(int i=0;i<nodeList.getLength();i++)
		{
			Node node= nodeList.item(i);
			NamedNodeMap namedNodeAttributesMap=node.getAttributes();
			Node idcNode=namedNodeAttributesMap.getNamedItem("idC");
			//LOGGER_INV.log(Level.INFO,"name  ="+idcNode.getNodeName());
			if(idcNode.getNodeValue()!=null && idcNode.getNodeValue().equals("label")==false && idcNode.getNodeValue().equals("")==false)
				{
					node.getAttributes().getNamedItem("name").setNodeValue(resultEntryVOGroupByValidatedBy.getRequisitionNo() +"#"+resultEntryVOGroupByValidatedBy.getLaboratoryCode()+resultEntryVOGroupByValidatedBy.getGroupCode()+"#group"+node.getAttributes().getNamedItem("name").getNodeValue());
					
					//LOGGER_INV.log(Level.INFO,"Node Name = "+node.getAttributes().getNamedItem("name").getNodeValue());
					
					// Commented because used for Result Validation
					/*for(TriStringObject triStringObject:resultValidationDataList)
					{
						//LOGGER_INV.log(Level.INFO,"triStringObject Name ="+(resultEntryVOGroupByValidatedBy.getRequisitionDNo()+"#grouptemplate#"+triStringObject.getDesc()+triStringObject.getName()));
						if((resultEntryVOGroupByValidatedBy.getRequisitionDNo().substring(0, 18)+"#"+resultEntryVOGroupByValidatedBy.getLaboratoryCode()+resultEntryVOGroupByValidatedBy.getGroupCode()+"#grouptemplate#"+triStringObject.getDesc()+triStringObject.getName()).equals(node.getAttributes().getNamedItem("name").getNodeValue()))
							node.getAttributes().getNamedItem("value").setNodeValue(HelperClass.convertValueToHtml(triStringObject.getCode()));
					}*/
					
					
					
					
				}
			
			
		}
	}
	
	public static String convertValueToHtml(String elementValue) {
		
		return StringEscapeUtils.unescapeXml(elementValue);
	}
	
	
	
	public static boolean is_string_double_numeric(String data)
	{
		    boolean isflag=false;
		
		 try {
		        Double d = Double.parseDouble(data);
		        isflag=true;
		        System.out.printf("valid no:"+d);
		    }
		    catch (NumberFormatException nfe) {
		    	isflag=false;
		        System.out.printf("not a valid number:");
		    }
		 
		 return isflag;
		 
	}
	
	
}