//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v1.0
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
// Any modifications to this file will be lost upon recompilation of the source schema.
// Generated on: 2007.02.05 at 03:52:32 PST
//


package hisglobal.transactionmgmnt.xmlTest.transaction.impl;

/*
Developed By          : Partha P Chattaraj
Creation Dated        : 17-06-2006
Modification Dated    : 07-05-2008
Version               : HIMS 2.0

*/

public class OprTypeImpl implements hisglobal.transactionmgmnt.xmlTest.transaction.OprType, com.sun.xml.bind.unmarshaller.UnmarshallableObject, com.sun.xml.bind.serializer.XMLSerializable, com.sun.xml.bind.validator.ValidatableObject
{

    protected java.lang.String _BLOCKSIZE;
    protected com.sun.xml.bind.util.ListImpl _BLOCK = new com.sun.xml.bind.util.ListImpl(new java.util.ArrayList());
    protected java.lang.String _ID;
    protected java.lang.String _NAME;
    protected java.lang.String _QRYTOTSIZE;
    protected java.lang.String _TRNMGMT;
    private final static com.sun.msv.grammar.Grammar schemaFragment = com.sun.xml.bind.validator.SchemaDeserializer.deserialize("\u00ac\u00ed\u0000\u0005sr\u0000\u001fcom.sun.msv.grammar.SequenceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.BinaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0004exp1t\u0000 Lcom/sun/msv/grammar/Expression;L\u0000\u0004exp2q\u0000~\u0000\u0002xr\u0000\u001ecom.sun.msv.grammar.Expression\u00f8\u0018\u0082\u00e8N5~O\u0002\u0000\u0003I\u0000\u000ecachedHashCodeL\u0000\u0013epsilonReducibilityt\u0000\u0013Ljava/lang/Boolean;L\u0000\u000bexpandedExpq\u0000~\u0000\u0002xp\u0003\u00ea\u00b1\u009eppsq\u0000~\u0000\u0000\u0003\u001f&\u00fcppsq\u0000~\u0000\u0000\u0002\u00b9`\u00e4ppsq\u0000~\u0000\u0000\u0001\u00c1\u00ac\u00e4ppsq\u0000~\u0000\u0000\u0001\"^]ppsr\u0000 com.sun.msv.grammar.OneOrMoreExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001ccom.sun.msv.grammar.UnaryExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\u0003expq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00c9\u00d9\\ppsr\u0000\'com.sun.msv.grammar.trex.ElementPattern\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\tnameClasst\u0000\u001fLcom/sun/msv/grammar/NameClass;xr\u0000\u001ecom.sun.msv.grammar.ElementExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002Z\u0000\u001aignoreUndeclaredAttributesL\u0000\fcontentModelq\u0000~\u0000\u0002xq\u0000~\u0000\u0003\u0000\u00c9\u00d9Ypp\u0000sq\u0000~\u0000\r\u0000\u00c9\u00d9Npp\u0000sr\u0000\u001dcom.sun.msv.grammar.ChoiceExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0001\u0000\u00c9\u00d9Cppsq\u0000~\u0000\n\u0000\u00c9\u00d98sr\u0000\u0011java.lang.Boolean\u00cd r\u0080\u00d5\u009c\u00fa\u00ee\u0002\u0000\u0001Z\u0000\u0005valuexp\u0000psr\u0000 com.sun.msv.grammar.AttributeExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\u0003expq\u0000~\u0000\u0002L\u0000\tnameClassq\u0000~\u0000\u000exq\u0000~\u0000\u0003\u0000\u00c9\u00d95q\u0000~\u0000\u0016psr\u00002com.sun.msv.grammar.Expression$AnyStringExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\bsq\u0000~\u0000\u0015\u0001q\u0000~\u0000\u001asr\u0000 com.sun.msv.grammar.AnyNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\u001dcom.sun.msv.grammar.NameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xpsr\u00000com.sun.msv.grammar.Expression$EpsilonExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\tq\u0000~\u0000\u001bpsr\u0000#com.sun.msv.grammar.SimpleNameClass\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0002L\u0000\tlocalNamet\u0000\u0012Ljava/lang/String;L\u0000\fnamespaceURIq\u0000~\u0000\"xq\u0000~\u0000\u001dt\u0000.transactionMgmnt.xmlTest.transaction.BlockTypet\u0000+http://java.sun.com/jaxb/xjc/dummy-elementssq\u0000~\u0000!t\u0000\u0005BLOCKt\u0000\u0000sq\u0000~\u0000\u0012\u0000X\u0084\u00fcppsq\u0000~\u0000\u0017\u0000X\u0084\u00f1q\u0000~\u0000\u0016psr\u0000\u001bcom.sun.msv.grammar.DataExp\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\u0002dtt\u0000\u001fLorg/relaxng/datatype/Datatype;L\u0000\u0006exceptq\u0000~\u0000\u0002L\u0000\u0004namet\u0000\u001dLcom/sun/msv/util/StringPair;xq\u0000~\u0000\u0003\u0000I\u00d8\u0096q\u0000~\u0000\u0016psr\u0000#com.sun.msv.datatype.xsd.StringType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001Z\u0000\risAlwaysValidxr\u0000*com.sun.msv.datatype.xsd.BuiltinAtomicType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000%com.sun.msv.datatype.xsd.ConcreteType\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xr\u0000\'com.sun.msv.datatype.xsd.XSDatatypeImpl\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0003L\u0000\fnamespaceUriq\u0000~\u0000\"L\u0000\btypeNameq\u0000~\u0000\"L\u0000\nwhiteSpacet\u0000.Lcom/sun/msv/datatype/xsd/WhiteSpaceProcessor;xpt\u0000 http://www.w3.org/2001/XMLSchemat\u0000\u0006stringsr\u0000.com.sun.msv.datatype.xsd.WhiteSpaceProcessor$1\u0013JMoI\u00db\u00a4G\u0002\u0000\u0000xr\u0000,com.sun.msv.datatype.xsd.WhiteSpaceProcessor\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xp\u0001sr\u00000com.sun.msv.grammar.Expression$NullSetExpression\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0000xq\u0000~\u0000\u0003\u0000\u0000\u0000\nppsr\u0000\u001bcom.sun.msv.util.StringPair\u00d0t\u001ejB\u008f\u008d\u00a0\u0002\u0000\u0002L\u0000\tlocalNameq\u0000~\u0000\"L\u0000\fnamespaceURIq\u0000~\u0000\"xpq\u0000~\u00006q\u0000~\u00005sq\u0000~\u0000!t\u0000\u0004NAMEq\u0000~\u0000(q\u0000~\u0000 sq\u0000~\u0000\u0012\u0000\u009fN\u0082ppsq\u0000~\u0000\u0017\u0000\u009fNwq\u0000~\u0000\u0016pq\u0000~\u0000.sq\u0000~\u0000!t\u0000\bTRN_MGMTq\u0000~\u0000(q\u0000~\u0000 sq\u0000~\u0000\u0012\u0000\u00f7\u00b3\u00fbppsq\u0000~\u0000\u0017\u0000\u00f7\u00b3\u00f0q\u0000~\u0000\u0016pq\u0000~\u0000.sq\u0000~\u0000!t\u0000\nBLOCK_SIZEq\u0000~\u0000(q\u0000~\u0000 sq\u0000~\u0000\u0012\u0000e\u00c6\u0013ppsq\u0000~\u0000\u0017\u0000e\u00c6\bq\u0000~\u0000\u0016pq\u0000~\u0000.sq\u0000~\u0000!t\u0000\u0002IDq\u0000~\u0000(q\u0000~\u0000 sq\u0000~\u0000\u0012\u0000\u00cb\u008a\u009dppsq\u0000~\u0000\u0017\u0000\u00cb\u008a\u0092q\u0000~\u0000\u0016pq\u0000~\u0000.sq\u0000~\u0000!t\u0000\fQRY_TOT_SIZEq\u0000~\u0000(q\u0000~\u0000 sr\u0000\"com.sun.msv.grammar.ExpressionPool\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0002\u0000\u0001L\u0000\bexpTablet\u0000/Lcom/sun/msv/grammar/ExpressionPool$ClosedHash;xpsr\u0000-com.sun.msv.grammar.ExpressionPool$ClosedHash\u00d7j\u00d0N\u00ef\u00e8\u00ed\u001c\u0002\u0000\u0004I\u0000\u0005countI\u0000\tthresholdL\u0000\u0006parentq\u0000~\u0000Q[\u0000\u0005tablet\u0000![Lcom/sun/msv/grammar/Expression;xp\u0000\u0000\u0000\r\u0000\u0000\u00009pur\u0000![Lcom.sun.msv.grammar.Expression;\u00d68D\u00c3]\u00ad\u00a7\n\u0002\u0000\u0000xp\u0000\u0000\u0000\u00bfppppppppppppppppppppppppppppppppppppppppppppq\u0000~\u0000Lpppppppppppppppppppppq\u0000~\u0000\u0014ppppq\u0000~\u0000@ppppq\u0000~\u0000\tq\u0000~\u0000\u0013pppppppppppq\u0000~\u0000\u0006ppppppppppppq\u0000~\u0000\fppppppppppppppppppppq\u0000~\u0000Hppppppppppppppq\u0000~\u0000\u0005pppppppppppppq\u0000~\u0000\bq\u0000~\u0000\u0007ppppppq\u0000~\u0000)pppppppppppppppppppppppppq\u0000~\u0000Dpppp");

    private final static java.lang.Class PRIMARY_INTERFACE_CLASS() {
        return hisglobal.transactionmgmnt.xmlTest.transaction.OprType.class;
    }

    public java.lang.String getBLOCKSIZE() {
        return _BLOCKSIZE;
    }

    public void setBLOCKSIZE(java.lang.String value) {
        _BLOCKSIZE = value;
    }

    public java.util.List getBLOCK() {
        return _BLOCK;
    }

    public java.lang.String getID() {
        return _ID;
    }

    public void setID(java.lang.String value) {
        _ID = value;
    }

    public java.lang.String getNAME() {
        return _NAME;
    }

    public void setNAME(java.lang.String value) {
        _NAME = value;
    }

    public java.lang.String getQRYTOTSIZE() {
        return _QRYTOTSIZE;
    }

    public void setQRYTOTSIZE(java.lang.String value) {
        _QRYTOTSIZE = value;
    }

    public java.lang.String getTRNMGMT() {
        return _TRNMGMT;
    }

    public void setTRNMGMT(java.lang.String value) {
        _TRNMGMT = value;
    }

    public com.sun.xml.bind.unmarshaller.ContentHandlerEx getUnmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
        return new hisglobal.transactionmgmnt.xmlTest.transaction.impl.OprTypeImpl.Unmarshaller(context);
    }

    public java.lang.Class getPrimaryInterfaceClass() {
        return PRIMARY_INTERFACE_CLASS();
    }

    public void serializeElements(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = _BLOCK.size();
        while (idx2 != len2) {
            if (_BLOCK.get(idx2) instanceof javax.xml.bind.Element) {
                context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _BLOCK.get(idx2 ++)));
            } else {
                context.startElement("", "BLOCK");
                int idx_0 = idx2;
                context.childAsAttributes(((com.sun.xml.bind.serializer.XMLSerializable) _BLOCK.get(idx_0 ++)));
                context.endAttributes();
                context.childAsElements(((com.sun.xml.bind.serializer.XMLSerializable) _BLOCK.get(idx2 ++)));
                context.endElement();
            }
        }
    }

    public void serializeAttributes(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = _BLOCK.size();
        if (_NAME!= null) {
            context.startAttribute("", "NAME");
            try {
                context.text(((java.lang.String) _NAME));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_TRNMGMT!= null) {
            context.startAttribute("", "TRN_MGMT");
            try {
                context.text(((java.lang.String) _TRNMGMT));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_BLOCKSIZE!= null) {
            context.startAttribute("", "BLOCK_SIZE");
            try {
                context.text(((java.lang.String) _BLOCKSIZE));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_ID!= null) {
            context.startAttribute("", "ID");
            try {
                context.text(((java.lang.String) _ID));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
        if (_QRYTOTSIZE!= null) {
            context.startAttribute("", "QRY_TOT_SIZE");
            try {
                context.text(((java.lang.String) _QRYTOTSIZE));
            } catch (java.lang.Exception e) {
                com.sun.xml.bind.marshaller.Util.handlePrintConversionException(this, e, context);
            }
            context.endAttribute();
        }
    }

    public void serializeAttributeBodies(com.sun.xml.bind.serializer.XMLSerializer context)
        throws org.xml.sax.SAXException
    {
        int idx2 = 0;
        final int len2 = _BLOCK.size();
    }

    public java.lang.Class getPrimaryInterface() {
        return (hisglobal.transactionmgmnt.xmlTest.transaction.OprType.class);
    }

    public com.sun.msv.verifier.DocumentDeclaration createRawValidator() {
        return new com.sun.msv.verifier.regexp.REDocumentDeclaration(schemaFragment);
    }

    public class Unmarshaller
        extends com.sun.xml.bind.unmarshaller.ContentHandlerEx
    {


        public Unmarshaller(com.sun.xml.bind.unmarshaller.UnmarshallingContext context) {
            super(context, "--------------");
        }

        protected com.sun.xml.bind.unmarshaller.UnmarshallableObject owner() {
            return hisglobal.transactionmgmnt.xmlTest.transaction.impl.OprTypeImpl.this;
        }

        public void enterElement(java.lang.String ___uri, java.lang.String ___local, org.xml.sax.Attributes __atts)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  3 :
                    if (("" == ___uri)&&("QRY" == ___local)) {
                        _BLOCK.add(((hisglobal.transactionmgmnt.xmlTest.transaction.impl.BlockTypeImpl) spawnChildFromEnterElement((hisglobal.transactionmgmnt.xmlTest.transaction.impl.BlockTypeImpl.class), 4, ___uri, ___local, __atts)));
                        return ;
                    }
                    break;
                case  0 :
                    if (("" == ___uri)&&("BLOCK" == ___local)) {
                        context.pushAttributes(__atts);
                        goto3();
                        return ;
                    }
                    break;
                case  5 :
                    if (("" == ___uri)&&("BLOCK" == ___local)) {
                        context.pushAttributes(__atts);
                        goto3();
                        return ;
                    }
                    revertToParentFromEnterElement(___uri, ___local, __atts);
                    return ;
            }
            super.enterElement(___uri, ___local, __atts);
        }

        public void leaveElement(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  4 :
                    if (("" == ___uri)&&("BLOCK" == ___local)) {
                        context.popAttributes();
                        state = 5;
                        return ;
                    }
                    break;
                case  5 :
                    revertToParentFromLeaveElement(___uri, ___local);
                    return ;
            }
            super.leaveElement(___uri, ___local);
        }

        public void enterAttribute(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  3 :
                    if (("" == ___uri)&&("ID" == ___local)) {
                        _BLOCK.add(((hisglobal.transactionmgmnt.xmlTest.transaction.impl.BlockTypeImpl) spawnChildFromEnterAttribute((hisglobal.transactionmgmnt.xmlTest.transaction.impl.BlockTypeImpl.class), 4, ___uri, ___local)));
                        return ;
                    }
                    if (("" == ___uri)&&("ROWS_INS" == ___local)) {
                        _BLOCK.add(((hisglobal.transactionmgmnt.xmlTest.transaction.impl.BlockTypeImpl) spawnChildFromEnterAttribute((hisglobal.transactionmgmnt.xmlTest.transaction.impl.BlockTypeImpl.class), 4, ___uri, ___local)));
                        return ;
                    }
                    if (("" == ___uri)&&("QRY_SIZE" == ___local)) {
                        _BLOCK.add(((hisglobal.transactionmgmnt.xmlTest.transaction.impl.BlockTypeImpl) spawnChildFromEnterAttribute((hisglobal.transactionmgmnt.xmlTest.transaction.impl.BlockTypeImpl.class), 4, ___uri, ___local)));
                        return ;
                    }
                    if (("" == ___uri)&&("MANDATORY" == ___local)) {
                        _BLOCK.add(((hisglobal.transactionmgmnt.xmlTest.transaction.impl.BlockTypeImpl) spawnChildFromEnterAttribute((hisglobal.transactionmgmnt.xmlTest.transaction.impl.BlockTypeImpl.class), 4, ___uri, ___local)));
                        return ;
                    }
                    break;
                case  0 :
                    if (("" == ___uri)&&("QRY_TOT_SIZE" == ___local)) {
                        state = 8;
                        return ;
                    }
                    if (("" == ___uri)&&("NAME" == ___local)) {
                        state = 12;
                        return ;
                    }
                    if (("" == ___uri)&&("BLOCK_SIZE" == ___local)) {
                        state = 6;
                        return ;
                    }
                    if (("" == ___uri)&&("TRN_MGMT" == ___local)) {
                        state = 1;
                        return ;
                    }
                    if (("" == ___uri)&&("ID" == ___local)) {
                        state = 10;
                        return ;
                    }
                    break;
                case  5 :
                    revertToParentFromEnterAttribute(___uri, ___local);
                    return ;
            }
            super.enterAttribute(___uri, ___local);
        }

        public void leaveAttribute(java.lang.String ___uri, java.lang.String ___local)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (state) {
                case  7 :
                    if (("" == ___uri)&&("BLOCK_SIZE" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  9 :
                    if (("" == ___uri)&&("QRY_TOT_SIZE" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  2 :
                    if (("" == ___uri)&&("TRN_MGMT" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  13 :
                    if (("" == ___uri)&&("NAME" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  11 :
                    if (("" == ___uri)&&("ID" == ___local)) {
                        goto0();
                        return ;
                    }
                    break;
                case  5 :
                    revertToParentFromLeaveAttribute(___uri, ___local);
                    return ;
            }
            super.leaveAttribute(___uri, ___local);
        }

        public void text(java.lang.String value)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            try {
                switch (state) {
                    case  12 :
                        try {
                            _NAME = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 13;
                        return ;
                    case  6 :
                        try {
                            _BLOCKSIZE = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 7;
                        return ;
                    case  5 :
                        revertToParentFromText(value);
                        return ;
                    case  1 :
                        try {
                            _TRNMGMT = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 2;
                        return ;
                    case  10 :
                        try {
                            _ID = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 11;
                        return ;
                    case  8 :
                        try {
                            _QRYTOTSIZE = value;
                        } catch (java.lang.Exception e) {
                            handleParseConversionException(e);
                        }
                        state = 9;
                        return ;
                }
            } catch (java.lang.RuntimeException e) {
                handleUnexpectedTextException(value, e);
            }
        }

        public void leaveChild(int nextState)
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            switch (nextState) {
                case  4 :
                    state = 4;
                    return ;
            }
            super.leaveChild(nextState);
        }

        private void goto3()
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            int idx;
            state = 3;
            idx = context.getAttribute("", "ID");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "MANDATORY");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "QRY_SIZE");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "ROWS_INS");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
        }

        private void goto0()
            throws com.sun.xml.bind.unmarshaller.UnreportedException
        {
            int idx;
            state = 0;
            idx = context.getAttribute("", "NAME");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "TRN_MGMT");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "BLOCK_SIZE");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "ID");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
            idx = context.getAttribute("", "QRY_TOT_SIZE");
            if (idx >= 0) {
                context.consumeAttribute(idx);
                return ;
            }
        }

    }

}
