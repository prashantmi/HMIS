/**
 <!--
  
 ## Copyright Information				: C-DAC, Noida  
 ## Project Name				       	: NIMS
 ## Name of Developer		 			: Puneet
 ## Module Name					        : INVESTIGATION
 ## Process/Database Object Name	    : Template Processing User Class
 ## Purpose						        : This class provides functions for utilizing the XML generated by department Test Parameter Master
 ## Date of Creation					: 
 ## Modification Log					:				
 ##		Modify Date				        :  
 ##		Reason	(CR/PRS)			    : 
 ##		Modify By				        : 


*/

package new_investigation.transactions.controller.Helper;

import hisglobal.Entry;
import hisglobal.utility.HelperMethods;





import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;
import javax.xml.transform.Source;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.commons.lang.StringEscapeUtils;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.NamedNodeMap;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import new_investigation.InvestigationConfig;
import new_investigation.transactions.controller.data.InvResultValidationDATA;
import new_investigation.transactions.controller.data.departmentSpecificResultEntryDATA;
import new_investigation.transactions.dao.Helper.InvestigationTemplateDataHelper;
import new_investigation.vo.InvCriteriaCodeVO;
import new_investigation.vo.InvResultEntryVO;
import new_investigation.vo.TestMandRefMasterVO;
import new_investigation.vo.template.HexaStringClass;
import new_investigation.vo.template.ResultEntryVOGroupByValidatedBy;
import new_investigation.vo.template.ResultEntryVO;
import new_investigation.vo.template.SiteVO;
import new_investigation.vo.template.TemplateQueryParameterVO;
import new_investigation.vo.template.TriStringObject;

public class departmentTemplateProcessingUSE {
	
	private static Map<String,List<String>> mp_autolist=new HashMap();
	private static List<String> lstEnteredValues=new ArrayList<String>();


	public static List<ResultEntryVO> groupSelectedWorkOrders(
			List<ResultEntryVO> selectedWorkOrderList, HttpSession session) {
		// TODO Auto-generated method stub
	//	LOGGER_INV.log(Level.INFO,"INVESTIGATION COMMON PROCESS: groupSelectedWorkOrders ");

		mp_autolist=new HashMap();
		List<ResultEntryVO> newselectedWorkOrderList=new ArrayList<ResultEntryVO>();
		ResultEntryVO newResultEntryVOGroupByValidatedBy=null;
		Map<String,Integer> selectedMapDetails=new HashMap<String,Integer>();
		Map<String, Integer> selectedDynamicGroupDetail = new HashMap<String, Integer>();
		Map<String, List<ResultEntryVO>> dynamicReqNoList = new HashMap<String, List<ResultEntryVO>>();
		session.removeAttribute("dynamicTemplateList");
		Map<String, ResultEntryVO> reqDNoTestMap = new HashMap<String, ResultEntryVO>();
		List<ResultEntryVO> rvoWithDynamic = new ArrayList<ResultEntryVO>();
		try
		{
		//	LOGGER_INV.log(Level.INFO,"INVESTIGATION COMMON PROCESS: groupSelectedWorkOrders step 1");
		for(ResultEntryVO resultEntryVOGroupByValidatedBy:selectedWorkOrderList)
		{
			for(ResultEntryVO resultEntryVO: resultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy())
			{
				String s = (resultEntryVO.getGroupCode()==null?resultEntryVO.getTestCode():resultEntryVO.getGroupCode()) + resultEntryVO.getDynamnicTemplateResultEntryGroup();
				
				if(selectedDynamicGroupDetail.containsKey(s)) {
					resultEntryVO.setDoCreateTemplate(false);
					rvoWithDynamic.add(resultEntryVO);
					reqDNoTestMap.put(resultEntryVO.getRequisitionNo()+resultEntryVO.getGroupCode()+resultEntryVO.getTestCode(), resultEntryVO);
					
				}	
				else if(resultEntryVO.getDynamnicTemplateResultEntryGroup().equals("1"))
				{
					//resultEntryVO.setTestName(resultEntryVO.getGroupName());
					selectedDynamicGroupDetail.put((resultEntryVO.getGroupCode()==null?resultEntryVO.getTestCode():resultEntryVO.getGroupCode()) + "1", 1);
					rvoWithDynamic.add(resultEntryVO);
					reqDNoTestMap.put(resultEntryVO.getRequisitionNo()+resultEntryVO.getGroupCode()+resultEntryVO.getTestCode(), resultEntryVO);
				}
			}
			
			
			
		}
		session.setAttribute("dynamicTests", reqDNoTestMap);
		for(ResultEntryVO resultEntryVOGroupByValidatedBy:selectedWorkOrderList)
		{
//			if(resultEntryVOGroupByValidatedBy.getGroupCode() !=null //					
//					)
//			{
//				/*
//				 * resultEntryVOGroupByValidatedBy represents a group so no processing is 
//				 * required add this to new list
//				 * */
//				int workOrderGroupIndex=newselectedWorkOrderList.size();
//				newselectedWorkOrderList.add(resultEntryVOGroupByValidatedBy);
//				int resultEntryVOIndex=0;
//				for(ResultEntryVO resultEntryVO: resultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy())
//				{
//					getResultEntryTemplatedocument(resultEntryVO,resultEntryVOIndex,newselectedWorkOrderList.size()-1, session);
//					resultEntryVOIndex++;
//				}
//				
//				getTestGroupTemplatedocument(resultEntryVOGroupByValidatedBy, workOrderGroupIndex, session);
//				
//				
//				
//			}
//			else
//			{
			//	LOGGER_INV.log(Level.INFO,"INVESTIGATION COMMON PROCESS: groupSelectedWorkOrders step2");
				String key=resultEntryVOGroupByValidatedBy.getPatCRNo()+resultEntryVOGroupByValidatedBy.getEpisodeCode()+resultEntryVOGroupByValidatedBy.getPatVisitNo()+resultEntryVOGroupByValidatedBy.getSampleNo();
				if(resultEntryVOGroupByValidatedBy.getRequisitionTypeCode().equals("1"))
				{
					key=resultEntryVOGroupByValidatedBy.getPatCRNo()+resultEntryVOGroupByValidatedBy.getEpisodeCode()+resultEntryVOGroupByValidatedBy.getPatVisitNo()+resultEntryVOGroupByValidatedBy.getSampleNo();
				}
				else if(resultEntryVOGroupByValidatedBy.getRequisitionTypeCode().equals("2"))
				{
					key=resultEntryVOGroupByValidatedBy.getPatCRNo()+resultEntryVOGroupByValidatedBy.getEpisodeCode()+resultEntryVOGroupByValidatedBy.getPatVisitNo()+resultEntryVOGroupByValidatedBy.getSampleNo();
				}
				else if(resultEntryVOGroupByValidatedBy.getRequisitionTypeCode().equals("3"))
				{
					key=resultEntryVOGroupByValidatedBy.getPatCRNo()+resultEntryVOGroupByValidatedBy.getEpisodeCode()+resultEntryVOGroupByValidatedBy.getPatVisitNo()+resultEntryVOGroupByValidatedBy.getSampleNo();
					//key=resultEntryVOGroupByValidatedBy.getRequisitionDNo().substring(0,17)+resultEntryVOGroupByValidatedBy.getSampleNo();
				}else if(resultEntryVOGroupByValidatedBy.getRequisitionTypeCode().equals("4"))
				{
					key=resultEntryVOGroupByValidatedBy.getPatCRNo()+resultEntryVOGroupByValidatedBy.getEpisodeCode()+resultEntryVOGroupByValidatedBy.getPatVisitNo()+resultEntryVOGroupByValidatedBy.getSampleNo();
					//key=resultEntryVOGroupByValidatedBy.getRequisitionDNo().substring(0,17)+resultEntryVOGroupByValidatedBy.getSampleNo();
				}
				else
				{
					
				}
				
				/*if(selectedMapDetails.containsKey(key))
				{
					newResultEntryVOGroupByValidatedBy=newselectedWorkOrderList.get(selectedMapDetails.get(key));
					for(ResultEntryVO resultEntryVO :resultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy())
					{
						// get the template for the workOrder ResultEntry 
						getResultEntryTemplatedocument(resultEntryVO,newResultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy().size(),selectedMapDetails.get(key), session);
						newResultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy().add(resultEntryVO);
					}
					
				}*/
				//else
				{
					
					
					newResultEntryVOGroupByValidatedBy=resultEntryVOGroupByValidatedBy;
					newselectedWorkOrderList.add(newResultEntryVOGroupByValidatedBy);
					selectedMapDetails.put(key, newselectedWorkOrderList.size()-1);
					int resultEntryVOIndex=0;
					
					
					for(ResultEntryVO resultEntryVO: newResultEntryVOGroupByValidatedBy.getResultEntryVOListValidatedBy())
					{
//						String s = resultEntryVO.getGroupCode() + resultEntryVO.getDynamnicTemplateResultEntryGroup();
//						
//						if(selectedDynamicGroupDetail.containsKey(s)) {
//							resultEntryVO.setDoCreateTemplate(false);
//							rvoWithDynamic.add(resultEntryVO);
//							
//						}	
//						else if(resultEntryVO.getDynamnicTemplateResultEntryGroup().equals("1"))
//						{
//							//resultEntryVO.setTestName(resultEntryVO.getGroupName());
//							selectedDynamicGroupDetail.put(resultEntryVO.getGroupCode() + "1", 1);
//							rvoWithDynamic.add(resultEntryVO);
//						}
						 getResultEntryTemplatedocument(resultEntryVO,resultEntryVOIndex,newselectedWorkOrderList.size()-1, session);
						resultEntryVOIndex++;
						//newselectedWorkOrderList.get(newselectedWorkOrderList.size()-1).setParaLoinc(resultEntryVO.getParaLoinc());
					}
					
					dynamicReqNoList.put(newResultEntryVOGroupByValidatedBy.getRequisitionNo(), rvoWithDynamic);
					
					//newselectedWorkOrderList.get(newselectedWorkOrderList.size()-1).setLoincCode(resultEntryVO.get);
				}
			}
			
			
	//	}
		}
		catch (Exception e) 
		{
			e.printStackTrace();
		}
		session.setAttribute("dynamicTemplateList", dynamicReqNoList);
		selectedWorkOrderList=null;
		session.removeAttribute("dynamicTests");
		return newselectedWorkOrderList;

	}
	
	public static synchronized void getResultEntryTemplatedocument(ResultEntryVO resultEntryVO, int index,int workOrderGroupIndex, HttpSession session)
	{
		
		try
		{
			boolean isGroupWithDynamicTemplate = false;
		//LOGGER_INV.log(Level.INFO,"getResultEntryTemplatedocument");
			String dynamicTemplateID = null;
			String genericTemplateId=InvestigationConfig.GENERIC_TEMPLATE_ID;//make config value
		if(resultEntryVO.getDynamnicTemplateResultEntryGroup() != null && resultEntryVO.getDynamnicTemplateResultEntryGroup().equals("1"))
		{
			// it is a group and to be printed with dynamic template 
			isGroupWithDynamicTemplate = true;
			dynamicTemplateID =InvestigationTemplateDataHelper.getInstance().getDynamicDeptTemplateStatus((resultEntryVO.getGroupCode()==null?resultEntryVO.getTestCode():resultEntryVO.getGroupCode()), resultEntryVO.getHospitalcode(), isGroupWithDynamicTemplate, resultEntryVO.getLabCode());
		}
		else
		{
			// it is a test or test in a group
			isGroupWithDynamicTemplate = false;
			 dynamicTemplateID = InvestigationTemplateDataHelper.getInstance().getDynamicTemplateStatus(resultEntryVO.getTestCode(), null, isGroupWithDynamicTemplate, resultEntryVO.getLabCode(),resultEntryVO.getParaType());
		}
	  	boolean isPrintWithDynamicTemplate = false;
	  	String testC = resultEntryVO.getTestCode();
	  	if(dynamicTemplateID != null && !dynamicTemplateID.isEmpty())
    	{
	  		if(dynamicTemplateID.equals("-1")==false)
	  		{
	  		isPrintWithDynamicTemplate = true;
	  		testC = dynamicTemplateID;
	  		}
	  		else
		  	{
		  		isPrintWithDynamicTemplate = true;
		  		testC = "1";
		  		
		  		
		  	}
    	}
	  	
	  	Transformer transformer = null;
	  	if(!isPrintWithDynamicTemplate)
	  		transformer = InvestigationTemplateDataHelper.getInstance().getTransformerObject(InvestigationConfig.XSL_RESULTENTRYSTYLESHEET); //tansformerFactory.newTransformer(new StreamSource(path+"ResultEntryStyleSheet.xsl"));
	  	else
	  		transformer = InvestigationTemplateDataHelper.getInstance().getTransformerObject(InvestigationConfig.XSL_DYNAMICRESULTPRINTINGTEMPLATE); //tansformerFactory.newTransformer(new StreamSource(path+"ResultEntryStyleSheet.xsl"));
		//InvestigationDocumentCacheManager documentCacheManager =InvestigationDocumentCacheManager.getInstance();
	  //	transformer = dynamicTransformer;
	  	
	  	//department xml data
		Node testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObj(InvestigationConfig.XML_DEPARTMENT_TESTTEMPLATE, testC, session,isPrintWithDynamicTemplate );
	  	Node genericTestDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObj(InvestigationConfig.XML_DEPARTMENT_TESTTEMPLATE, genericTemplateId, session,isPrintWithDynamicTemplate );
	  	String testCode = resultEntryVO.getTestCode();
	  	String labCode = resultEntryVO.getLabCode();
	  	String hospitalCode = resultEntryVO.getHospitalcode();
		boolean withStandardRanges = InvestigationTemplateDataHelper.getPrintWithStandardRanges(testCode, labCode, hospitalCode);

	  	resultEntryVO.setPrintWithStandardRanges(withStandardRanges);
	  	
	  	if(testDocumentNode == null && genericTestDocumentNode == null)
	  	{
	  		System.out.println("No template found");
	  		resultEntryVO.setTemplateDocumentString(null);
	  		return;// resultEntryVO;	  		
	  	}
	  	
	    Document testDocument=InvestigationTemplateDataHelper.getInstance().getNewDocument();
	    Element rootNode=testDocument.createElement("test");
	    rootNode.setAttribute("code",resultEntryVO.getTestCode());
 
	    rootNode.setAttribute("sessionNo","2");//resultEntryVO.getSessionId());
 
	    rootNode.setAttribute("requisitionDNo",resultEntryVO.getRequisitionDNo());
	    rootNode.setAttribute("testName",resultEntryVO.getTestName());
	   // LOGGER_INV.log(Level.INFO,"requisitionDNo::"+resultEntryVO.getRequisitionDNo());
	    testDocument.appendChild(rootNode);
	    if(testDocumentNode!=null)
	    	rootNode.appendChild(testDocument.importNode(testDocumentNode, true));
	    else if(genericTestDocumentNode!=null)
	    	rootNode.appendChild(testDocument.importNode(genericTestDocumentNode, true));
	   //changed by ashu
	    //add generic node also
	    //if(genericTestDocumentNode!=null)
	    //rootNode.appendChild(testDocument.importNode(genericTestDocumentNode, true));
	    
	   // LOGGER_INV.log(Level.INFO,testDocument.getTextContent());
	    
	    resultEntryVO.setTestDocument(testDocument);
	    processTheTestDocument(resultEntryVO,testDocument, session);
	    
	  // LOGGER_INV.log(Level.INFO,"getResultEntryTemplatedocument + 2");     
	   TemplateQueryParameterVO templateQueryParameterVO=new TemplateQueryParameterVO();
	  // LOGGER_INV.log(Level.INFO,"getResultEntryTemplatedocument + 2.1");    
	   HelperMethods.populate( templateQueryParameterVO,resultEntryVO);
	  // LOGGER_INV.log(Level.INFO,"getResultEntryTemplatedocument + 2.2");
	   
	   //Commented by Siddharth
	   // Date: 13/04/2015
	   // Use: It is used to process the queryValue element. So the value of the query is executed and put in the template.
	   //InvRequisitionFormDATA.processTheDatabaseElements(testDocument.getFirstChild(), templateQueryParameterVO, null);
	   
	 //  LOGGER_INV.log(Level.INFO,"getResultEntryTemplatedocument + 3");   
	   templateQueryParameterVO=null;
	        
	      //  LOGGER_INV.log(Level.INFO,"root Node   = "+testDocument.getFirstChild().getNodeName());
	      
	        // here requisition form and sample collection template is gona add
	   /**
	    * Commented by Siddharth 
	    * Date: 13/04/2015
	    */
	     /*   if(resultEntryVO.getIsRequisitionFormRequired().equals("1"))
	        {
	        	String requisitionDNo=(resultEntryVO.getAssociatedToWorkOrder()==null||(resultEntryVO.getAssociatedToWorkOrder().equals("")))?resultEntryVO.getRequisitionDNo():resultEntryVO.getAssociatedToWorkOrder();
	        	
	        	Document requisitionTemplate=getRequisitionTemplate(requisitionDNo,index);
		        if(requisitionTemplate!=null)
		        {
		        rootNode.appendChild(testDocument.importNode(requisitionTemplate.getFirstChild(),true));
		        }
	        }
	       
	        if(resultEntryVO.getIsSampleCollectionFormRequired().equals("1"))
	        {
	        Document sampleCollectionTemplate=getSampleCollectionTemplate(resultEntryVO.getRequisitionDNo(),index);
		        if(sampleCollectionTemplate!=null)
		        {
		        rootNode.appendChild(testDocument.importNode(sampleCollectionTemplate.getFirstChild(),true));
		        }
	        }
	        */
	        //code modified till here 
	      
	        Source domSource=new DOMSource(testDocument);
		 	java.io.CharArrayWriter baos=new java.io.CharArrayWriter();
		 	StreamResult streamResult=new StreamResult(baos) ;
		 	transformer.setParameter("workOrder", resultEntryVO.getRequisitionDNo());
		 	transformer.setParameter("workOrderIndex",index );

		 	transformer.setParameter("multisessionid","2");//resultEntryVO.getSessionId());
 

		 	transformer.setParameter("workOrderGroupIndex",workOrderGroupIndex);
		 	transformer.transform(domSource,streamResult);	
//		 	if(resultEntryVO.isDoCreateTemplate())
//		 	{
		 		resultEntryVO.setTemplateDocumentString(baos.toString());
//		 	}
//		 	else {
//		 		resultEntryVO.setTemplateDocumentString("");
//		 		resultEntryVO.setTestName("");
//		 	}
		 	
		 	// Siddharth
		 	// for printlng xml
		 	javax.xml.transform.TransformerFactory tfactory = TransformerFactory.newInstance();
		 	javax.xml.transform.Transformer xform = tfactory.newTransformer();
		 	java.io.StringWriter writer = new java.io.StringWriter();
		 	StreamResult result = new javax.xml.transform.stream.StreamResult(writer);
		 	xform.transform(domSource, result);
		 	System.out.println(writer.toString());
	  	

		}
		catch(Exception Ex)
		{
			Ex.printStackTrace();
		}
				
	//	return resultEntryVO;
	}
	
	public static void processTheTestDocument(ResultEntryVO resultEntryVO,Document testDocument, HttpSession session)
	{
	//	
		lstEnteredValues=new ArrayList<String>();
		System.out.println(testDocument.toString());
		NodeList tableNodeList = testDocument.getElementsByTagName("table");
		
		HashMap<String,String> mp=new HashMap();
		HashMap<String,String> mp_ref=new HashMap();
		
		//List<Entry>  mandatoryInfoDtlList=(List<Entry>)resultEntryDataMap.get("mandatoryInfoDtlList");
		
		HashMap<String, ResultEntryVO> m = new HashMap<String, ResultEntryVO>();
	
		//List<HexaStringClass> rangeFromToList= InvestigationTemplateDataHelper.getInstance().getRangeFromToList(resultEntryVO, "1");//(List<HexaStringClass>)resultEntryDataMap.get("rangeFromToList");
		//List<SiteVO> siteDiagnosisList=(List<SiteVO>)resultEntryDataMap.get("siteDiagnosisDetailList");
		NodeList nodeList = testDocument.getElementsByTagName("element");
		Map<String, ResultEntryVO> dmap = null;
		for(int i=0;i<nodeList.getLength();i++)
		{
			Node node= nodeList.item(i);
			NamedNodeMap namedNodeAttributesMap=node.getAttributes();
			Node idcNode=namedNodeAttributesMap.getNamedItem("idC");
			
			//LOGGER_INV.log(Level.INFO,"name  ="+idcNode.getNodeName());
			if(idcNode.getNodeValue()!=null && idcNode.getNodeValue().equals("label")==false && idcNode.getNodeValue().equals("")==false
					&&  idcNode.getNodeValue().equals("range") == false)
				{
			
				if(resultEntryVO.getDynamnicTemplateResultEntryGroup().equals("1")) {
					String nodeValue = node.getAttributes().getNamedItem("name").getNodeValue();
					String[] splitNodeValue = nodeValue.split("#");
					String stestCode = splitNodeValue[1].substring(0,5);
					dmap = (Map<String,ResultEntryVO>)session.getAttribute("dynamicTests");
					if(dmap.containsKey(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + stestCode))
					{
						resultEntryVO = dmap.get(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + stestCode);
						
					}
					
				}
																						
					
					
//					String rDNo = resultEntryVO.getRequisitionDNo();
//					if(dmap != null && dmap.size() > 0)
//					{
//						for( int k = 0; k < dmap.size(); k++)
//						{
//							if(dmap.containsKey(stestCode))
//							{
//								rDNo = dmap.get(stestCode);
//							}
//						}
//					}

				
				
				
				//if(autocompletion)
				

					node.getAttributes().getNamedItem("name").setNodeValue(resultEntryVO.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#"+node.getAttributes().getNamedItem("name").getNodeValue());
				
					//node.getAttributes().getNamedItem("value").setNodeValue(resultEntryVO.getTestCode() +"#" + resultEntryVO.getSampleNo()+"#"+resultEntryVO.getLaboratoryCode()+"#");
					//LOGGER_INV.log(Level.INFO,"Node Name = "+node.getAttributes().getNamedItem("name").getNodeValue());
					
					
					//defaultValues
					List<TriStringObject> defaultValues = InvestigationTemplateDataHelper.getDefaultValues(resultEntryVO);
					for(TriStringObject triStringObject:defaultValues)
					{						
						if(idcNode.getNodeValue().equals("autocomplete"))
						{
						NodeList childOptions = node.getChildNodes().item(0).getChildNodes();
						int len = childOptions.getLength();
						String autoList="";
						List<String> lstAutoList=new ArrayList<String>();
						int c=0;
						for(c=0;c<len-1;c++)
						{
							
							 autoList+="{\"label\":\""+childOptions.item(c).getAttributes().getNamedItem("label").getNodeValue()+"\" ,  \"value\": \""+childOptions.item(c).getAttributes().getNamedItem("value").getNodeValue()+"\" }";
							autoList+=",";
							/*cannedDetails+="{\"label\":\""+splitCannedDetails[i].split("#")[0]+"\" ,  \"value\": \""+splitCannedDetails[i].split("#")[0]+"\" }";
					   		cannedDetails+=","; 
					   		
					   		  }
					            	
					            	
					            	 AddRowToTableAddMoreValue(splitCannedDetails[i]);
					            		cannedDetails+="{\"label\":\""+splitCannedDetails[i].split("#")[0]+"\" ,  \"value\": \""+splitCannedDetails[i].split("#")[0]+"\" }";
					            //	alert(cannedDetails.length);
					            	
					            	cannedDetails="["+cannedDetails.toString()+"]";	*/
							
							
						}
												
						autoList+="{\"label\":\""+childOptions.item(c).getAttributes().getNamedItem("label").getNodeValue()+"\" ,  \"value\": \""+childOptions.item(c).getAttributes().getNamedItem("value").getNodeValue()+"\" }";
						autoList="["+autoList.toString()+"]";
						autoList=autoList.toString();
						lstAutoList.add(autoList);
						mp_autolist.put(node.getAttributes().getNamedItem("id").getNodeValue(), lstAutoList);
						}
						
						//LOGGER_INV.log(Level.INFO,"triStringObject Name ="+(resultEntryVO.getRequisitionDNo()+"#template#"+triStringObject.getDesc()+triStringObject.getName()));
						if((resultEntryVO.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#template#"+triStringObject.getDesc()).equals(node.getAttributes().getNamedItem("name").getNodeValue()))						
							node.getAttributes().getNamedItem("value").setNodeValue(convertValueToHtml(triStringObject.getCode()));
					
					
					
					
					
					
					
					
					}
					
					/*
					 * Commented by Siddharth
					 * Date: 13/04/2015*/
					Map resultEntryDataMap= departmentSpecificResultEntryDATA.getDeptResultEntryData(resultEntryVO);
					List<TriStringObject> resultValidationDataList=(List<TriStringObject>)resultEntryDataMap.get("resultValidationDataList");
					 for(TriStringObject triStringObject:resultValidationDataList)
					{
						 String testing=resultEntryVO.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#template#"+triStringObject.getDesc();
						 String fetched_testing=node.getAttributes().getNamedItem("name").getNodeValue();
						 
						 //check if multi value list box
						 String[] multivalue = null;

							if (triStringObject.getCode().contains("$"))
								multivalue = triStringObject.getCode().split("\\$");
						 
						 
						//LOGGER_INV.log(Level.INFO,"triStringObject Name ="+(resultEntryVO.getRequisitionDNo()+"#template#"+triStringObject.getDesc()+triStringObject.getName()));
						if((resultEntryVO.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#template#"+triStringObject.getDesc()).equals(node.getAttributes().getNamedItem("name").getNodeValue()))
						{	
							if (multivalue == null)//not list box
							{
							
							if(node.getAttributes().getNamedItem("value").getNodeValue().equals(""))
							{
								
								if(!lstEnteredValues.contains(resultEntryVO.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#template#"+triStringObject.getDesc()+"#"+triStringObject.getCode()))
								{	node.getAttributes().getNamedItem("value").setNodeValue(convertValueToHtml(triStringObject.getCode()));
								lstEnteredValues.add(resultEntryVO.getRequisitionDNo()+"#"+resultEntryVO.getSessionId()+"#template#"+triStringObject.getDesc()+"#"+triStringObject.getCode());
								}
									
							}
							}
							resultEntryVO.setPreviousValue(triStringObject.getCode());
							
							//check condition for input only to be inserted
							
							if(idcNode.getNodeValue().equals("input"))
	                    	{
	                    		
	                    	if(namedNodeAttributesMap.getNamedItem("changeTableId")!=null)
	                    		
							if(!node.getAttributes().getNamedItem("changeTableId").getNodeValue().equals(""))
								{
								
								for(int k=0;k<tableNodeList.getLength();k++)
								{
									Node tableNode= tableNodeList.item(k);
									NamedNodeMap tableNamedNodeAttributesMap=tableNode.getAttributes();
									Node tableidNode=tableNamedNodeAttributesMap.getNamedItem("type");
									
									if(tableidNode!=null)
									if(node.getAttributes().getNamedItem("changeTableId").getNodeValue().equals(tableidNode.getNodeValue()))
									{
										System.out.println(tableidNode.getNodeValue());
										NodeList tableChildNodes=tableNode.getChildNodes();
										Node mainRowNode=tableChildNodes.item(1);
										
										NamedNodeMap mainRowNodeMap=mainRowNode.getAttributes();
										Node rowidNode=mainRowNodeMap.getNamedItem("rowNo");
										
										//add up extra xml nodes accordingly
										for(int noOfRows=0;noOfRows<( (Integer.parseInt(triStringObject.getCode())-1)   );noOfRows++)
										{
										Node newNode=mainRowNode.cloneNode(true);
										tableNode.appendChild(newNode);
										}
												
										System.out.println("prnt");
									}
									
								
								}
								
								
								
								}
	                    	}
							
							//fetching data of datalist for autocomplete functionality
							/*if(node.hasChildNodes())
								if(node.getChildNodes().item(0).getNodeName().equals("datalist")==true)
								{
									
									NodeList childOptions = node.getChildNodes().item(0).getChildNodes();

									int len = childOptions.getLength();
									
									
									
								}*/
							
							
							
							
							
							
							if(multivalue!=null)
							{
							NodeList optionList = node.getChildNodes();
							Node optionValue = optionList.item(0);

							NodeList childOptions = optionValue.getChildNodes();

							int len = childOptions.getLength();
							
							// .getAttributes().getNamedItem("value").setNodeValue(convertValueToHtml(value));

							// String valuein=optionsList.toString();
							
								for (String selectedValue : multivalue)
									for (int x = 0; x < len; x++) {
										Node value1 = childOptions.item(x);
										String adasa = value1.getAttributes()
												.getNamedItem("value")
												.getNodeValue();
										if (value1.getAttributes()
												.getNamedItem("value")
												.getNodeValue()
												.equals(selectedValue)) { 
											 value1.getAttributes().getNamedItem("selected").setNodeValue("true");

											//Element abcd = (Element) value1;
											//abcd.setAttribute("selected", "true");

										}

									}
							}
							
						}
						
					}
					 
					 
					/*get the reference range based on Normal, Gender, Age */
					 List<TestMandRefMasterVO > objRefRangeList = InvestigationTemplateDataHelper.getInstance().getReferanceRange(resultEntryVO.getHospitalcode());
					 String id = node.getAttributes().getNamedItem("name").getNodeValue();
						String[] codes = id.split("#");
						String testCode = null;
						String paraCode = null;
						String Gender=resultEntryVO.getPatGender();
						String Age=resultEntryVO.getPatAge();
						if(codes != null && codes.length == 4)
						{
							if(codes[3].length()>9)
								{
								
								testCode=codes[3].substring(codes[3].length()-9, codes[3].length()-4);
								paraCode=codes[3].substring(codes[3].length()-4, codes[3].length());
								
								  
								
								}
							
							else
							{
							testCode = codes[3].substring(0,5);
							paraCode = codes[3].substring(5);
							}
						}
						//mp.put(paraCode+"previousValue", resultEntryVO.getPreviousValue());						
						
						mp.put(codes[3]+"previousValue", resultEntryVO.getPreviousValue());
						if(mp.containsKey(codes[3]) == false)
						{
						//	System.out.println("Siddharth: Inside Template Processing Use and adding paraCode for those which doesn't exist " + paraCode);
						//	mp.put(paraCode, "");
							mp.put(codes[3], "");
						}
						 List<InvCriteriaCodeVO > objCriteriaCodeList = InvestigationTemplateDataHelper.getInstance().getCriteriaCode();
						 if(mp.containsKey(codes[3]) == false)
							{
							//	System.out.println("Siddharth: Inside Template Processing Use and adding paraCode for those which doesn't exist " + paraCode);
								//mp.put(paraCode, "");
								mp.put(codes[3], "");
							}	 
					 String strReferanceRange = getReferenceRange(objRefRangeList, objCriteriaCodeList, testCode, paraCode,  Gender,  Age);
					if(strReferanceRange!=null)
					 strReferanceRange=strReferanceRange.replace("$", "#");
					//For testing(Siddharth) remove later
					Element newRangeNodeElement=testDocument.createElement("rangetag"); 
					
					if(resultEntryVO.getPrintWithStandardRanges() == true)
					{
						if(strReferanceRange != null)
						{
							String[] strValue = strReferanceRange.split("#");
							String strRefRange = strValue[1] +"-"+strValue[0]+" "+strValue[3];
							newRangeNodeElement.setAttribute("rangefrom",strValue[1]);
							newRangeNodeElement.setAttribute("rangefromunit",strValue[3]);
							newRangeNodeElement.setAttribute("rangeto",strValue[0]);
							newRangeNodeElement.setAttribute("rangetounit",strValue[2]);
							newRangeNodeElement.setAttribute("rangesymbol","");
							strReferanceRange=strReferanceRange.replace("#", "$");
							//mp.put(paraCode+"refrange", strReferanceRange);
							mp.put(codes[3]+"refrange", strReferanceRange);
						}
						else
						{
							newRangeNodeElement.setAttribute("rangefrom"," ");
							newRangeNodeElement.setAttribute("rangefromunit"," ");
							newRangeNodeElement.setAttribute("rangeto"," ");
							newRangeNodeElement.setAttribute("rangetounit"," ");
							newRangeNodeElement.setAttribute("rangesymbol"," ");
							//mp.put(paraCode+"refrange", "");
							mp.put(codes[3]+"refrange", "");
						}
					}
					else
					{
						newRangeNodeElement.setAttribute("rangefrom"," ");
						newRangeNodeElement.setAttribute("rangefromunit"," ");
						newRangeNodeElement.setAttribute("rangeto"," ");
						newRangeNodeElement.setAttribute("rangetounit"," ");
						newRangeNodeElement.setAttribute("rangesymbol"," ");
						//mp.put(paraCode+"refrange", "");
						mp.put(codes[3]+"refrange", "");
					}
					node.appendChild(newRangeNodeElement);
				
					if(dmap != null)
						dmap.put(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + resultEntryVO.getTestCode(), resultEntryVO);
				}
			else if(idcNode.getNodeValue()!=null && idcNode.getNodeValue().equals("label")==true)
			{
				if(node.getAttributes().getNamedItem("id") != null )
				{
					String id = node.getAttributes().getNamedItem("id").getNodeValue();
					String[] codes = id.split("#");
					String testCode = null;
					String paraCode = null;
					
				
					if(codes != null && codes.length == 2)
					{
						testCode = codes[1].substring(0,5);
						paraCode = codes[1].substring(5);
					
						if(resultEntryVO.getDynamnicTemplateResultEntryGroup().equals("1")) {
							//String nodeValue = node.getAttributes().getNamedItem("name").getNodeValue();
							//String[] splitNodeValue = nodeValue.split("#");
							//String stestCode = splitNodeValue[1].substring(0,5);
							dmap = (Map<String,ResultEntryVO>)session.getAttribute("dynamicTests");
							
							if(dmap.containsKey(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + testCode))
							{
								resultEntryVO = dmap.get(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + testCode);
							}
							
						}
						
						
						
						String sampleCode = resultEntryVO.getSampleCode();
						String uomCode = resultEntryVO.getUomCode(); // get uom code from resultentry
		
						String loincCode = InvestigationTemplateDataHelper.getInstance().getLoincCode(testCode, paraCode, sampleCode, uomCode);
						if(loincCode != null) {
							node.getAttributes().getNamedItem("value").setNodeValue(node.getAttributes().getNamedItem("value").getNodeValue() + " (" + loincCode + ")");
							resultEntryVO.setLoincCode(loincCode);
						//	System.out.println("Siddharth: Adding Loinc: Inside Template Processing Use " + paraCode);
							//mp.put(paraCode, loincCode);
							mp.put(codes[1], loincCode);
							//resultEntryVO.
							
						}
						else {
							// remove when loinc Codes have been entered
							
							node.getAttributes().getNamedItem("value").setNodeValue(node.getAttributes().getNamedItem("value").getNodeValue() + " ");
							
							//node.getAttributes().getNamedItem("value").setNodeValue(node.getAttributes().getNamedItem("value").getNodeValue() + " (" + "41758-4" + ")");
							resultEntryVO.setLoincCode("");
						//	mp.put(paraCode, "");
							mp.put(codes[1], loincCode);
						}
							
					}
				}
				//Element newLoincCodeElement =testDocument.createElement("loinc"); 
				//newLoincCodeElement.setAttribute("loincCode","loinc");				
				//node.appendChild(newLoincCodeElement);
				if(dmap != null)
					dmap.put(resultEntryVO.getRequisitionNo()+ resultEntryVO.getGroupCode() + resultEntryVO.getTestCode(), resultEntryVO);
			}
			
			
			
		}
		
		resultEntryVO.setParaLoinc(mp);

		session.setAttribute("dynamicTests", dmap);
		session.setAttribute("mpParaLoinc" + resultEntryVO.getRequisitionNo(), mp);

		resultEntryVO.setAutoList(mp_autolist);

	//	resultEntryVO.setRefUOM(mp_ref);			for passing the ref range values fetched 
		//return resultEntryVO;
	}
	
	
	
	private static String getReferenceRange( List<TestMandRefMasterVO > objRefRangeList,  List<InvCriteriaCodeVO > objCriteriaCodeList, String strTestCode, String strTestParaCode, String strGender, String strAge)
	{
		String strCriteriaCode =null;
		String strReferanceRangeString = null;
		for(InvCriteriaCodeVO objCriteriaCodeVO : objCriteriaCodeList)
		{
			
			if(strTestCode.equalsIgnoreCase(objCriteriaCodeVO.getTestCode()) && strTestParaCode.equalsIgnoreCase(objCriteriaCodeVO.getParamterCode()))
			{
				strCriteriaCode = objCriteriaCodeVO.getCriteriaCode();
				break;
			}
		}
		
		for(TestMandRefMasterVO objRefRange : objRefRangeList)
		{
			if( InvestigationConfig.REFERENCE_RANGE_CRITERIA_NORMAL.equalsIgnoreCase(strCriteriaCode))
			{
				if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) && objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode))
				{
					strReferanceRangeString = objRefRange.getHighValue() + "$" +  objRefRange.getLowValue() + "$" + objRefRange.getHighValueUom() + "$" + objRefRange.getLowValueUom() + "$" + objRefRange.getSymbol() ;
					break;
				}
			}

			
			if( InvestigationConfig.REFERENCE_RANGE_CRITERIA_AGE.equalsIgnoreCase(strCriteriaCode)&&objRefRange.getLowAge()!=null)
			{
				double lowAge=Double.valueOf(objRefRange.getLowAge());
				
				if(objRefRange.getLowAgeUom().equals("1"))
					;
				else if(objRefRange.getLowAgeUom().equals("2"))
					lowAge=lowAge/12;
				else
					lowAge=lowAge/365;
				
				
				
				
				double  highAge=Double.valueOf(objRefRange.getHighAge());
				

				if(objRefRange.getHighAgeUom().equals("1"))
					;
				else if(objRefRange.getHighAgeUom().equals("2"))
					highAge=highAge/12;
				else
					highAge=highAge/365;
				
				//System.out.println("refRangelowAge"+lowAge);
				//System.out.println("refRangehighAge"+highAge);
				String[] splitAge=strAge.split(" ");
				double Age=Double.valueOf(splitAge[0]);
				String ageUom=splitAge[1];
				
				if(ageUom.equals("Yr"))
					;
				else if(ageUom.equals("Wk"))
					Age=Age/52;
				else if(ageUom.equals("Mth"))
					Age=Age/12;
				else
					Age=Age/365;
													
				
				
				//System.out.println("refRangeAge"+Age);
			  
				if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) && objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode)&&lowAge<=Age && highAge>=Age)
				{

					strReferanceRangeString = objRefRange.getHighValue() + "$" +  objRefRange.getLowValue() + "$" + objRefRange.getHighValueUom() + "$" + objRefRange.getLowValueUom() + "$" + objRefRange.getSymbol() ;

					break;
				}
			}
			
			if( InvestigationConfig.REFERENCE_RANGE_CRITERIA_GENDER.equalsIgnoreCase(strCriteriaCode))
			{
				
				System.out.println("refGender");
				String gender="";
				if(strGender.equals("M"))
				{
					gender="0";
				}
				if(strGender.equals("F"))
				{
					gender="1";
				}
				
				System.out.println("refGender"+gender);
				
				if(objRefRange.getTestCode().equalsIgnoreCase(strTestCode) && objRefRange.getParameterCode().equalsIgnoreCase(strTestParaCode)&&objRefRange.getGender().equals(gender))
				{

					strReferanceRangeString = objRefRange.getHighValue() + "$" +  objRefRange.getLowValue() + "$" + objRefRange.getHighValueUom() + "$" + objRefRange.getLowValueUom() + "$" + objRefRange.getSymbol() ;

					
					

					break;
				}
			}

		}
		return strReferanceRangeString;
	}
	
	public static synchronized void getTestGroupTemplatedocument(ResultEntryVO resultEntryVOGroupByValidatedBy, int workOrderGroupIndex, HttpSession session)
	{
		
		try
		{			
			//Transformer transformer = InvestigationTemplateDataHelper.getInstance().getTransformerObject(InvestigationConfig.XSL_RESULTENTRYSTYLESHEET); //tansformerFactory.newTransformer(new StreamSource(path+"ResultEntryStyleSheet.xsl"));
			String testC = resultEntryVOGroupByValidatedBy.getLaboratoryCode() +resultEntryVOGroupByValidatedBy.getGroupCode();
			String dynamicTemplateID = InvestigationTemplateDataHelper.getInstance().getDynamicTemplateStatus(testC,resultEntryVOGroupByValidatedBy.getHospitalcode(), true, resultEntryVOGroupByValidatedBy.getLabCode(),resultEntryVOGroupByValidatedBy.getParaType());
		  	boolean isPrintWithDynamicTemplate = false;
		  	
		  	if(dynamicTemplateID != null && !dynamicTemplateID.isEmpty())
	    	{
		  		isPrintWithDynamicTemplate = true;
		  		testC = dynamicTemplateID;
	    	}
		  	Transformer transformer = null;
		  	if(!isPrintWithDynamicTemplate)
		  		transformer = InvestigationTemplateDataHelper.getInstance().getTransformerObject(InvestigationConfig.XSL_RESULTENTRYSTYLESHEET); //tansformerFactory.newTransformer(new StreamSource(path+"ResultEntryStyleSheet.xsl"));
		  	else
		  		transformer = InvestigationTemplateDataHelper.getInstance().getTransformerObject(InvestigationConfig.XSL_DYNAMICRESULTPRINTINGTEMPLATE); //tansformerFactory.newTransformer(new StreamSource(path+"ResultEntryStyleSheet.xsl"));
			//InvestigationDocumentCacheManager documentCacheManager =InvestigationDocumentCacheManager.getInstance();
		  //	transformer = dynamicTransformer;
		  	
		  	
			Node testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObj(InvestigationConfig.XML_TESTTEMPLATE, testC, session,isPrintWithDynamicTemplate );

			
		  	//Node testDocumentNode=InvestigationTemplateDataHelper.getInstance().getTemplateNodeObj(InvestigationConfig.XML_LABTESTGROUPTEMPLATE, , session);
		    Document testDocument=InvestigationTemplateDataHelper.getInstance().getNewDocument();
		    if(testDocumentNode!=null)
		    {
	        Element rootNode=testDocument.createElement("testgroup");
	        rootNode.setAttribute("groupcode",resultEntryVOGroupByValidatedBy.getGroupCode());
	        
	        rootNode.setAttribute("requisitionNo",resultEntryVOGroupByValidatedBy.getRequisitionNo());
	        rootNode.setAttribute("groupname",resultEntryVOGroupByValidatedBy.getGroupName());
	        testDocument.appendChild(rootNode);
	        rootNode.appendChild(testDocument.importNode(testDocumentNode, true));
	        
	        resultEntryVOGroupByValidatedBy.setGroupTemplateDocument(testDocument);
	        processTheTestGroupDocument(resultEntryVOGroupByValidatedBy, testDocument);
	     
	        Source domSource=new DOMSource(testDocument);
		 	java.io.CharArrayWriter baos=new java.io.CharArrayWriter();
		 	StreamResult streamResult=new StreamResult(baos) ;
		 	transformer.setParameter("workOrder", resultEntryVOGroupByValidatedBy.getRequisitionNo());
		 	transformer.setParameter("workOrderIndex","NA" );
		 	transformer.setParameter("multisessionid",resultEntryVOGroupByValidatedBy.getGroupCode());
		 	transformer.setParameter("workOrderGroupIndex",workOrderGroupIndex);
		 	transformer.transform(domSource,streamResult);
		 	resultEntryVOGroupByValidatedBy.setGroupTemplateString(baos.toString());
		    }

		}
		catch(Exception Ex)
		{
			Ex.printStackTrace();
		}
				
	}
	
	public static void processTheTestGroupDocument(ResultEntryVO resultEntryVOGroupByValidatedBy,Document testDocument)
	{
		//LOGGER_INV.log(Level.INFO,"----------------inisde result entry process of process the test document");
		
		// Comment by Siddharth: These are used for Result Validation
	//	Map resultEntryDataMap= ResultEntryDATA.getResultEntryGroupData(resultEntryVOGroupByValidatedBy);
	//	List<TriStringObject> resultValidationDataList=(List<TriStringObject>)resultEntryDataMap.get("resultValidationDataList");
		
		NodeList nodeList = testDocument.getElementsByTagName("element");
		for(int i=0;i<nodeList.getLength();i++)
		{
			Node node= nodeList.item(i);
			NamedNodeMap namedNodeAttributesMap=node.getAttributes();
			Node idcNode=namedNodeAttributesMap.getNamedItem("idC");
			//LOGGER_INV.log(Level.INFO,"name  ="+idcNode.getNodeName());
			if(idcNode.getNodeValue()!=null && idcNode.getNodeValue().equals("label")==false && idcNode.getNodeValue().equals("")==false)
				{
					node.getAttributes().getNamedItem("name").setNodeValue(resultEntryVOGroupByValidatedBy.getRequisitionNo() +"#"+resultEntryVOGroupByValidatedBy.getLaboratoryCode()+resultEntryVOGroupByValidatedBy.getGroupCode()+"#group"+node.getAttributes().getNamedItem("name").getNodeValue());
					
					//LOGGER_INV.log(Level.INFO,"Node Name = "+node.getAttributes().getNamedItem("name").getNodeValue());
					
					// Commented because used for Result Validation
					/*for(TriStringObject triStringObject:resultValidationDataList)
					{
						//LOGGER_INV.log(Level.INFO,"triStringObject Name ="+(resultEntryVOGroupByValidatedBy.getRequisitionDNo()+"#grouptemplate#"+triStringObject.getDesc()+triStringObject.getName()));
						if((resultEntryVOGroupByValidatedBy.getRequisitionDNo().substring(0, 18)+"#"+resultEntryVOGroupByValidatedBy.getLaboratoryCode()+resultEntryVOGroupByValidatedBy.getGroupCode()+"#grouptemplate#"+triStringObject.getDesc()+triStringObject.getName()).equals(node.getAttributes().getNamedItem("name").getNodeValue()))
							node.getAttributes().getNamedItem("value").setNodeValue(HelperClass.convertValueToHtml(triStringObject.getCode()));
					}*/
					
					
					
					
				}
			
			
		}
	}
	
	public static String convertValueToHtml(String elementValue) {
		
		return StringEscapeUtils.unescapeXml(elementValue);
	}

	
}